<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yinwoods</title>
  <subtitle>To Be A Better Man!😈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yinwoods.work/"/>
  <updated>2017-12-30T06:54:42.677Z</updated>
  <id>http://blog.yinwoods.work/</id>
  
  <author>
    <name>yinwoods</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>配置不同局域网ssh互联</title>
    <link href="http://blog.yinwoods.work/2017/12/30/%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8C%E5%B1%80%E5%9F%9F%E7%BD%91ssh%E4%BA%92%E8%81%94/"/>
    <id>http://blog.yinwoods.work/2017/12/30/配置不同局域网ssh互联/</id>
    <published>2017-12-30T06:54:00.000Z</published>
    <updated>2017-12-30T06:54:42.677Z</updated>
    
    <content type="html"><![CDATA[<p>最近新向实验室申请了三台服务器用于做毕业设计，但是因为不常在实验室，所以想到有没有一个好的方法能够做到即使不在实验室的局域网中也能够ssh到实验室的机器。也就是说做到从一个局域网中的A机器ssh至另一个局域网中的B机器。</p>
<p>其实大概想一下，就知道完全是可行的，毕竟A与B都联网了，没道理联网的机器却无法互相通信。但也很容易想到存在的限制，就是我怎么拿到B的唯一ID，以此来与它建立通信呢？一般情况下我们ssh用的是域名或者公网IP（归根结底就是公网IP），由此想到能否利用一台具备公网IP的机器C作为两个局域网AB之间的跳板机呢？</p>
<p>看了下ssh命令，发现是可以的，不需要安装其他软件，仅借助ssh即可实现。</p>
<p>在机器B上执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -fCNR &lt;port1&gt;:localhost:22 username@C</div></pre></td></tr></table></figure>
<p>命令的意思是在C上做端口转发，将C机器的port1端口转发到B机器的22端口（22是sshd的默认端口）</p>
<p>这样一来，我们就能够做到使用A ssh连入C，再执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p port1 localhost</div></pre></td></tr></table></figure>
<p>即可ssh连入B</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近新向实验室申请了三台服务器用于做毕业设计，但是因为不常在实验室，所以想到有没有一个好的方法能够做到即使不在实验室的局域网中也能够ssh到实验室的机器。也就是说做到从一个局域网中的A机器ssh至另一个局域网中的B机器。&lt;/p&gt;
&lt;p&gt;其实大概想一下，就知道完全是可行的，毕
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="ssh 端口转发" scheme="http://blog.yinwoods.work/tags/ssh-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AWS上kafka端口开放外网访问问题解决方法</title>
    <link href="http://blog.yinwoods.work/2017/11/15/AWS%E4%B8%8AKafka%E7%AB%AF%E5%8F%A3%E5%A4%96%E7%BD%91%E5%BC%80%E6%94%BE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.yinwoods.work/2017/11/15/AWS上Kafka端口外网开放问题解决方法/</id>
    <published>2017-11-15T14:23:00.000Z</published>
    <updated>2017-11-16T07:45:10.954Z</updated>
    
    <content type="html"><![CDATA[<p>目前公司采用ELK来存放以及利用日志，采用filebeat将日志发送至Kafka，之后再写一个python脚本作为消费者把Kafka内的日志拉取下来并打入到elasticsearch中，供后期查询检索使用。</p>
<p>本来这是一套比较完备的流程，但由于最近接了新的业务，而新产生的日志在对方的机器上，也就是说我们需要把Kafka端口开放至公网，供外部机器写入消息；</p>
<p>在确认Kafka端口开放后，远程主机可以连接Kafka并建立topic，但是却无法写日志；中间折腾了好几个小时才折腾出来，觉得有必要记录一下，避免后人踩坑。</p>
<p>首先分别修改kafka集群内机器配置文件如下：</p>
<p> config/server.properties:</p>
<ul>
<li><code>advertised.host=PUBLIC_IP</code></li>
<li><code>host.name=HOST_NAME</code></li>
<li>host.port=9092</li>
</ul>
<p>config/producer.properties:</p>
<ul>
<li><code>metadata.broker.list=PUBLIC_IP</code></li>
</ul>
<p>这样设置之后，远程主机仍然无法写数据，这是因为远程主机无法直接连接<code>HOST_NAME</code>；由此想到修改远程主机的<code>/etc/hosts</code>，修改如下：</p>
<p>/etc/hosts:</p>
<ul>
<li><code>PUBLIC_IP1</code> <code>HOST_NAME1</code></li>
<li><code>PUBLIC_IP2</code> <code>HOST_NAME2</code></li>
<li><code>PUBLIC_IP3</code> <code>HOST_NAME3</code></li>
<li>…</li>
<li><code>PUBLIC_IPn</code> <code>HOST_NAMEn</code></li>
</ul>
<p>综上，经过上面的这些配置，现在filebeat就可以向Kafka打日志了～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前公司采用ELK来存放以及利用日志，采用filebeat将日志发送至Kafka，之后再写一个python脚本作为消费者把Kafka内的日志拉取下来并打入到elasticsearch中，供后期查询检索使用。&lt;/p&gt;
&lt;p&gt;本来这是一套比较完备的流程，但由于最近接了新的业务，
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="kafka aws" scheme="http://blog.yinwoods.work/tags/kafka-aws/"/>
    
  </entry>
  
  <entry>
    <title>druid hadoop index 任务性能调优</title>
    <link href="http://blog.yinwoods.work/2017/08/22/druid-hadoop-index%E4%BB%BB%E5%8A%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <id>http://blog.yinwoods.work/2017/08/22/druid-hadoop-index任务性能调优/</id>
    <published>2017-08-22T14:23:00.000Z</published>
    <updated>2017-08-22T14:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>由于日常所做统计多数基于一份拼接日志，结合最近做的druid相关工作，很自然的想到把拼接日志一些统计常用字段select group by 出来通过 druid统计，这样就可以把自己从枯燥繁琐的统计脚本中解脱出来了。</p>
<h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><p>但是在执行druid的index任务时遇到了任务执行时间过久的问题，由于集群上还有其他例行服务需要资源，因此我这个低优先级的任务必须能够快速执行完成才可以。通过试错以及对网上相关资料的搜索，得到一下几种方法：</p>
<ul>
<li>通过设置yarn的调度策略，为这种默认占用资源多、执行时间久的任务单独开辟一个队列，限制其能够使用的最大资源量，从而保证其他高优先级的任务能够及时得到处理。而hadoop index任务可以通过在tuningConfig中的jobProperties设置mapreduce.job.queuename</li>
<li>降低每个segment的行数，这个可以通过设置targetPartitionSize完成。因为一个segment对应一个reducer，所以通过减少行数，增加segments个数从而增加reducer个数，充分应用并行化。</li>
<li>在ioConfig中设置rowFlushBoundary字段，并尽可能大。这个参数意味着在将数据写入磁盘前堆中缓存的行数，通过提高缓存从而优化任务执行效率。但也要注意设置不要超过堆内存的上限。</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p>1、<a href="https://groups.google.com/forum/#!topic/druid-user/hG8ctsdt7XA" target="_blank" rel="external">Scheduling Hadoop indexing tasks in specific YARN queue</a></p>
</li>
<li><p>2、<a href="https://groups.google.com/forum/#!msg/druid-user/w82AsjkHzzk/qIxbjrcVBgAJ" target="_blank" rel="external">Druid hadoop EMR indexing is extremly slow</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;由于日常所做统计多数基于一份拼接日志，结合最近做的druid相关工作，很自然的想到把拼接日志一些统计常用字段select group by
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="druid" scheme="http://blog.yinwoods.work/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>druid内存占用过多问题排查</title>
    <link href="http://blog.yinwoods.work/2017/08/02/druid%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E8%BF%87%E5%A4%9A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>http://blog.yinwoods.work/2017/08/02/druid内存占用过多问题排查/</id>
    <published>2017-08-02T13:53:00.000Z</published>
    <updated>2017-08-02T14:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用druid来做广告平台的实时分析，发现后台内存占用长期为48G（一共56G），起初怀疑是因为每天dataSource数据量较大，如果druid将所有数据加载进内存处理则会导致这么48G的内存占用；但是在对dataSource做reindex处理后，dataSource大小缩减为5M左右的情况下内存仍然没有降下来。</p>
<p>通过对系统状况的综合考虑，现在有以下两个猜想：</p>
<ul>
<li>druid配置错误，即使dataSource很小，druid仍然抢着内存不放</li>
<li>reindex操作错误，之前的segment并未删除，druid仍然加载内存导致内存溢出</li>
</ul>
<p>其实这里之所以对问题产生的原因不确定，很大程度上是因为自己对druid这一套服务并不了解，经过查阅官方文档，了解到druid并不会把所有的数据加载进内存再处理。 而且，在执行reindex时，historical的数据会被删除，但deep storage内的数据仍然保留；在处理后续查询的过程中historical也不会按需重新将deep storage中的数据加载进来。如果确实有查询已删除segment数据的需求，可以先将数据从deep segment导入historical，之后再查询。如果想从deep storage中删除segment可以参考：<a href="http://druid.io/docs/latest/misc/tasks.html" target="_blank" rel="external">🔗</a></p>
<p>historical并不会按需将所有数据存入segmentCache，只有在coordinator要求historical提前载入一个segment时才会把数据存入segmentCache。也就是说historical在加载数据时会先将所有的segment数据下载至本地硬盘，因此要注意在加载数据之前需要保证historical节点有足够的硬盘空间存放这些数据。</p>
<p>对于查询频率不高的历史数据，可以使用以下两个办法来降低成本：</p>
<p>1、在性能相对较差的机器上（比如使用机械硬盘而不是SSD）构建historical节点并设置tier规则来专门处理这些历史数据</p>
<p>2、另一个方法是对超过某个历史时期的数据设置较大的query granularity，从而降低segment大小；</p>
<p>具体的historical tier配置参考<a href="http://druid.io/docs/latest/configuration/historical.html" target="_blank" rel="external">🔗</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用druid来做广告平台的实时分析，发现后台内存占用长期为48G（一共56G），起初怀疑是因为每天dataSource数据量较大，如果druid将所有数据加载进内存处理则会导致这么48G的内存占用；但是在对dataSource做reindex处理后，dataSourc
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="druid" scheme="http://blog.yinwoods.work/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>airflow + celery 踩坑记录</title>
    <link href="http://blog.yinwoods.work/2017/07/26/airflow+celery%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.yinwoods.work/2017/07/26/airflow+celery踩坑记录/</id>
    <published>2017-07-26T09:02:00.000Z</published>
    <updated>2017-07-26T15:51:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识-airflow"><a href="#初识-airflow" class="headerlink" title="初识 airflow"></a>初识 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a></h3><p>其实早在去年就已经接触到 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 了，当时的需求是按小时拼接两份线上日志，而拼接操作必须依赖于两份日志的完整性。从这个需求出发，了解到了 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> ，但迫于官方文档的晦涩难懂，再加上这个任务对 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 的需求不够强，就弃坑了；最后使用 python 脚本中一个 while True 死循环 + time.sleep() 来解决问题(如果所依赖的日志没有完全写入，则 sleep 一段时间)。</p>
<h3 id="正式入坑"><a href="#正式入坑" class="headerlink" title="正式入坑"></a>正式入坑</h3><p>前几天 boss 布置了一个广告平台的统计任务，依赖倒也不复杂，但是考虑到未来平台的扩展性，还是需要一个能够很好的处理统计任务的工具的。自己也调研比较了一下<code>ETL(数据仓库)</code>这方面的工具，确实数 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 功能最为强大，既然这样那就入坑吧。</p>
<h3 id="airflow-安装配置过程"><a href="#airflow-安装配置过程" class="headerlink" title="airflow 安装配置过程"></a><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 安装配置过程</h3><p>这里都是按照官网操作，具体如下:</p>
<p>1、设置 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 项目路径，默认是用户主目录下 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> ，也可以显示用环境变量 <code>AIRFLOW_HOME</code> 指定;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> AIRFLOW_HOME=~/airflow</div></pre></td></tr></table></figure>
<p>2、<a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 安装，因为 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 是基于 python 编写，因此可以直接利用 pip 安装，这里要注意的是 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 还提供了使用其他软件的插件，例如 mysql、hdfs、hive 等工具，当然这些也可以在后续需要时再安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip3 install airflow</div><div class="line"></div><div class="line"><span class="comment"># 安装 [airflow](https://github.com/apache/incubator-airflow) hive 插件</span></div><div class="line">pip3 install <span class="string">"airflow[hive]"</span></div></pre></td></tr></table></figure>
<p>3、初始化 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 相关数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airflow initdb</div></pre></td></tr></table></figure>
<p>4、启动 webserver 服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airflow webserver</div></pre></td></tr></table></figure>
<p>至此，一个最基础的 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 服务就启动了，下面说一说 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 的配置。</p>
<h3 id="airflow-基础配置"><a href="#airflow-基础配置" class="headerlink" title="airflow 基础配置"></a><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 基础配置</h3><p><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 的配置文件保存在项目目录下，命名为 airflow.cfg ，通过文件内的注释也可以知道每个配置项的大致含义，这里简单说下常用的配置项。</p>
<h4 id="更改数据库"><a href="#更改数据库" class="headerlink" title="更改数据库"></a>更改数据库</h4><p><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 为了能够让用户快速使用选择了 sqllite 数据库，但在实际使用中，往往 mysql 更为广泛使用，若要使 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 使用 mysql ，首先执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 install <span class="string">"airflow[mysql]"</span></div></pre></td></tr></table></figure>
<p>更改 airflow.cfg 中 <code>sql_alchemy_conn</code> 的值，通过变量名可知配置使用的是 <a href="https://www.sqlalchemy.org/" target="_blank" rel="external">sql_alchemy</a> 的数据库连接字符串，具体格式为：<code>mysql+pymysql://username:password@host:port/database</code>，当然这里 <a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="external">pymysql</a> 可以根据自己喜好更换。</p>
<p>修改完配置文件后，需要执行 <code>airflow resetdb</code> 并重新启动 web 服务(<code>airflow webserver</code>)，数据库更换则生效。</p>
<h4 id="为web服务开启用户身份验证功能"><a href="#为web服务开启用户身份验证功能" class="headerlink" title="为web服务开启用户身份验证功能"></a>为web服务开启用户身份验证功能</h4><p><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 默认是无需登录即可访问使用的，而在实际生产环境中为了提高系统的安全性，需要开启用户身份验证功能，具体步骤如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[webserver]</div><div class="line"><span class="comment"># 开启用户身份验证</span></div><div class="line">authenticate = True</div><div class="line"></div><div class="line"><span class="comment"># 根据用户显示dag列表(依赖于用户身份验证的开启)</span></div><div class="line">filter_by_owner = False</div></pre></td></tr></table></figure>
<p>这样就开启了用户身份验证的功能，但系统还没有默认用户，需要自行手动添加，有两种方式，一种是直接插入默认用户信息到数据库对应的 users 表中(不推荐);另一种则是通过 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 提供的功能来添加，具体操作如下：</p>
<p>打开ipython，执行以下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> airflow</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> airflow <span class="keyword">import</span> models, settings</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> airflow.contrib.auth.backends.password_auth <span class="keyword">import</span> PasswordUser</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>user = PasswordUser(models.User())</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>user.username = <span class="string">'new_user_name'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>user.email = <span class="string">'new_user_email@example.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>user.password = <span class="string">'set_the_password'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>session = settings.Session()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(user)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>session.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>exit()</div></pre></td></tr></table></figure>
<p>重启 web 服务( <code>airflow webserver</code> )，刷新网址浏览器会自动跳转到用户登录页面。</p>
<h3 id="配置-airflow-Celery"><a href="#配置-airflow-Celery" class="headerlink" title="配置 airflow + Celery"></a>配置 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> + <a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a></h3><p><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 提供了三种 Executor ，分别是 <code>SequentialExecutor</code>、<code>LocalExecutor</code> 以及 <code>CeleryExecutor</code>；<a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 配置文件中，默认的执行方式是(<code>SequentialExecutor</code>)，这三者的特点如下：</p>
<ul>
<li><code>SequentialExecutor</code>: 单进程顺序执行，通常只用于测试</li>
<li><code>LocalExecutor</code>: 多进程本地执行，使用python的多进程库达到多进程执行目的</li>
<li><code>CeleryExecutor</code>: 使用<a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a> 作为执行器，配置 <a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a> 后可以利用集群分布式执行任务</li>
</ul>
<p>在这里我选用了<a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a>，同样是为了 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 未来的可扩展性。</p>
<p>官方文档中提到使用 <a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a> 时，后端服务可以使用 <a href="https://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a> 或 <a href="https://redis.io/" target="_blank" rel="external">Redis</a> ，相对来说自己对 redis 熟悉一些，但据我所知 <a href="https://redis.io/" target="_blank" rel="external">Redis</a> 相对来说比较吃内存，因此在这里选用了 <a href="https://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a> 。具体配置如下：</p>
<h4 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 <a href="https://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Ubuntu 17.04</span></div><div class="line">sudo apt install erlang rabbitmq-server</div></pre></td></tr></table></figure>
<h4 id="RabbitMQ-添加用户并设置密码"><a href="#RabbitMQ-添加用户并设置密码" class="headerlink" title="RabbitMQ 添加用户并设置密码"></a><a href="https://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a> 添加用户并设置密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Ubuntu 17.04</span></div><div class="line">sudo rabbitmqctl add_user airflow airflow</div><div class="line">sudo rabbitmqctl add_vhost airflow</div><div class="line">sudo rabbitmqctl set_user_tags airflow airflow</div><div class="line">sudo rabbitmqctl set_permissions -p airflow airflow <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></div><div class="line">sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</div></pre></td></tr></table></figure>
<p>更改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># transport://userid:password@hostname:port/virtual_host</span></div><div class="line">broker_url = amqp://ariflow:airflow@localhost:5672/airflow</div><div class="line">celery_result_backend = amqp://airflow:airflow@localhost:5672/airflow</div></pre></td></tr></table></figure>
<p>至此 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> + <a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a> 配置完成，接下来说说如何启动服务</p>
<h3 id="启动-Airflow-Celery-服务"><a href="#启动-Airflow-Celery-服务" class="headerlink" title="启动 Airflow + Celery 服务"></a>启动 Airflow + Celery 服务</h3><p>一共有四个服务，分别是：</p>
<ul>
<li><code>airflow webserver</code> 服务</li>
<li><code>airflow flower</code> <a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a> 管理界面</li>
<li><code>airflow worker</code> <a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a> Worker</li>
<li><code>airflow scheduler</code> 调度器</li>
</ul>
<h4 id="启动-airflow-webserver-服务"><a href="#启动-airflow-webserver-服务" class="headerlink" title="启动 airflow webserver 服务"></a>启动 <code>airflow webserver</code> 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airflow webserver</div></pre></td></tr></table></figure>
<h4 id="启动airflow-flower"><a href="#启动airflow-flower" class="headerlink" title="启动airflow flower"></a>启动<a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> flower</h4><p><code>airflow flower</code> 是一个监控 <a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a> 分布式队列的 web 服务，通过它可以看到 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> dag 中task 的执行状况。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airflow flower</div></pre></td></tr></table></figure>
<h4 id="启动-airflow-worker"><a href="#启动-airflow-worker" class="headerlink" title="启动 airflow worker"></a>启动 <code>airflow worker</code></h4><p><a href="http://www.celeryproject.org/" target="_blank" rel="external">Celery</a> 的 worker，用于执行 dag 中具体的 task</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airflow worker</div></pre></td></tr></table></figure>
<h4 id="启动-airflow-scheduler"><a href="#启动-airflow-scheduler" class="headerlink" title="启动 airflow scheduler"></a>启动 <code>airflow scheduler</code></h4><p><code>airflow scheduler</code> 用于启动调度器，完成对 dag 中 task 的调度。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">airflow scheduler</div></pre></td></tr></table></figure>
<h3 id="airflow-简单示例"><a href="#airflow-简单示例" class="headerlink" title="airflow 简单示例"></a><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 简单示例</h3><p>环境已经搭好，现在写个 dag 来测试一下 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 吧。在具体的代码展现之前，先介绍一下上文已经出现多次的 dag 这个概念，dag 对于熟悉图论的同学一定不陌生，也即 <code>(Directed Acyclic Graph, DAG)</code> ，为什么叫有向无环图呢，因为任务之间的依赖关系就是一个 DAG ，如下图：<br><img src="/images/dag.png" alt="DAG">。</p>
<p><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 会默认读取 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 目录下 dags 中的所有 python 文件作为 dag ，因此我们新建一个 dags 目录，并将下面的代码写入 <code>dags/test.py</code> 中，为了能够方便看到 dag 测试成功与否，在 test.py 里面设置了每次向 test 目录下的文件写入新内容。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> range</div><div class="line"><span class="keyword">import</span> airflow</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> DAG</div><div class="line"></div><div class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</div><div class="line"></div><div class="line">args = &#123;</div><div class="line">    <span class="string">'owner'</span>: <span class="string">'yinwoods'</span>,</div><div class="line">    <span class="string">'start_date'</span>: airflow.utils.dates.datetime(<span class="number">2017</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">dag = DAG(</div><div class="line">    dag_id=<span class="string">'yinwoods'</span>, default_args=args,</div><div class="line">    schedule_interval=<span class="string">'0 1 * * *'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_write_function</span><span class="params">(random_base)</span>:</span></div><div class="line">    <span class="string">"""This is a function that will run within the DAG execution"""</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'~/airflow/test/'</span> + random_base, <span class="string">'a'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(random_base[<span class="number">-1</span>] + <span class="string">'\n'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_context</span><span class="params">(ds, **kwargs)</span>:</span></div><div class="line">    pprint(kwargs)</div><div class="line">    print(ds)</div><div class="line">    <span class="keyword">return</span> <span class="string">'Whatever you return gets printed in the logs'</span></div><div class="line"></div><div class="line"></div><div class="line">run_this = PythonOperator(</div><div class="line">    task_id=<span class="string">'print_the_context'</span>,</div><div class="line">    provide_context=<span class="keyword">True</span>,</div><div class="line">    python_callable=print_context,</div><div class="line">    op_kwargs=&#123;<span class="string">'test'</span>: <span class="string">'test'</span>&#125;,</div><div class="line">    dag=dag)</div><div class="line"></div><div class="line"><span class="comment"># Generate 10 sleeping tasks, sleeping from 0 to 9 seconds respectively</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    task = PythonOperator(</div><div class="line">        task_id=<span class="string">'print_for_'</span> + str(i),</div><div class="line">        python_callable=my_write_function,</div><div class="line">        op_kwargs=&#123;<span class="string">'random_base'</span>: <span class="string">'file_'</span> + str(i)&#125;,</div><div class="line">        dag=dag)</div><div class="line"></div><div class="line">    task.set_upstream(run_this)</div></pre></td></tr></table></figure>
<p>以上代码保存后，执行 <code>python test.py</code> 即将该 dag 导入 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 中，之后可以选用 <code>airflow test</code> 或 <code>airflow backfill</code> 测试，这里就不再讲述具体用法。</p>
<p>启动 dag 时既可以使用 <code>airflow run dag_id task_id execution_date</code> ，也可以使用 web 界面的执行按钮执行。但需要注意的是，在启动之前需要 <code>airflow unpause dag_id</code> 或在 web 界面开启 dag 对应的按钮。</p>
<p>接下来就可以看到执行状态以及结果了。另外下面提供了另一份示例代码，注意观察这份代码中定义任务间依赖关系的语句:)，个人认为这样的语句能够更直观表明任务之间的关系。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">from</span> [airflow](https://github.com/apache/incubator-airflow) <span class="keyword">import</span> DAG</div><div class="line"><span class="keyword">from</span> airflow.operators.dummy_operator <span class="keyword">import</span> DummyOperator</div><div class="line"><span class="keyword">from</span> airflow.operators.python_operator <span class="keyword">import</span> PythonOperator</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello world!'</span></div><div class="line"></div><div class="line">dag = DAG(<span class="string">'hello_world'</span>, description=<span class="string">'Simple tutorial DAG'</span>,</div><div class="line">          schedule_interval=<span class="string">'0 12 * * *'</span>,</div><div class="line">          start_date=datetime(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">20</span>),</div><div class="line">          catchup=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">dummy_operator = DummyOperator(task_id=<span class="string">'dummy_task'</span>, retries=<span class="number">3</span>, dag=dag)</div><div class="line"></div><div class="line">hello_operator = PythonOperator(task_id=<span class="string">'hello_task'</span>,</div><div class="line">                                python_callable=print_hello, dag=dag)</div><div class="line"></div><div class="line">dummy_operator &gt;&gt; hello_operator</div></pre></td></tr></table></figure>
<p>如果执行 dag 后，发现 dag 中部分 task 一直处于 queue 的状态，可以查看 <code>airflow scheduler</code> 的执行状态，如果是挂掉了，且重启后又挂掉可以参考下面的解决方法。</p>
<h3 id="改源码解决-airflow-scheduler-中断-bug"><a href="#改源码解决-airflow-scheduler-中断-bug" class="headerlink" title="改源码解决 airflow scheduler 中断 bug"></a>改源码解决 <code>airflow scheduler</code> 中断 bug</h3><p>我在使用 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a>  的过程中，产生了 <code>airflow scheduler</code> 启动后执行片刻即被断开连接的情况，通过谷歌搜索，找到了以下修改 <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 源码的解决方法，至于这个中断bug的具体原因尚不清楚。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">--- /usr/local/lib/python3<span class="number">.4</span>/dist-packages/airflow/jobs.py.orig	<span class="number">2017</span><span class="number">-02</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">58</span>:<span class="number">55.057991344</span> +<span class="number">0000</span></div><div class="line">+++ /usr/local/lib/python3<span class="number">.4</span>/dist-packages/airflow/jobs.py	<span class="number">2017</span><span class="number">-02</span><span class="number">-16</span> <span class="number">11</span>:<span class="number">57</span>:<span class="number">07.060060262</span> +<span class="number">0000</span></div><div class="line"><span class="meta">@@ -1371,6 +1371,8 @@</span></div><div class="line">         last_stat_print_time = datetime(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line">         <span class="comment"># Last time that self.heartbeat() was called.</span></div><div class="line">         last_self_heartbeat_time = datetime.now()</div><div class="line">+        <span class="comment"># Last time that self.executor.heartbeat() was called.</span></div><div class="line">+        last_executor_heartbeat_time = datetime.now()</div><div class="line">         <span class="comment"># Last time that the DAG dir was traversed to look for files</span></div><div class="line">         last_dag_dir_refresh_time = datetime.now()</div><div class="line"></div><div class="line"><span class="meta">@@ -1436,9 +1438,14 @@</span></div><div class="line">                 self._execute_task_instances(simple_dag_bag,</div><div class="line">                                              (State.SCHEDULED,))</div><div class="line"></div><div class="line">-            <span class="comment"># Call hearbeats</span></div><div class="line">-            self.logger.info(<span class="string">"Heartbeating the executor"</span>)</div><div class="line">-            self.executor.heartbeat()</div><div class="line">+            <span class="comment"># Heartbeat the executor periodically</span></div><div class="line">+            time_since_last_heartbeat = (datetime.now() -</div><div class="line">+                                         last_executor_heartbeat_time).total_seconds()</div><div class="line">+            <span class="keyword">if</span> time_since_last_heartbeat &gt; self.heartrate:</div><div class="line">+                self.logger.info(<span class="string">"Heartbeating the executor"</span>)</div><div class="line">+                <span class="keyword">try</span>: self.executor.heartbeat()</div><div class="line">+                <span class="keyword">except</span> ConnectionResetError: <span class="keyword">pass</span>  <span class="comment"># RabbitMQ sometimes resets the socket connection</span></div><div class="line">+                last_executor_heartbeat_time = datetime.now()</div><div class="line"></div><div class="line">             <span class="comment"># Process events from the executor</span></div><div class="line">             self._process_executor_events()</div></pre></td></tr></table></figure>
<p><a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> 的介绍与使用就先写到这里，如果读者有与我类似或相同的问题，欢迎评论区探讨。</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="https://airflow.incubator.apache.org/" target="_blank" rel="external">Airflow 官方文档</a></li>
<li><a href="http://morefreeze.github.io/2016/12/airflow.html" target="_blank" rel="external">Airflow 简明指南</a></li>
<li><a href="http://blog.genesino.com/2016/05/airflow/#%E9%85%8D%E7%BD%AEceleryexecutor-rabbitmq%E6%94%AF%E6%8C%81" target="_blank" rel="external">Airflow Useage</a></li>
<li><a href="https://issues.apache.org/jira/browse/AIRFLOW-342" target="_blank" rel="external">Exception in <a href="https://github.com/apache/incubator-airflow" target="_blank" rel="external">airflow</a> scheduler: Connection reset by peer</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初识-airflow&quot;&gt;&lt;a href=&quot;#初识-airflow&quot; class=&quot;headerlink&quot; title=&quot;初识 airflow&quot;&gt;&lt;/a&gt;初识 &lt;a href=&quot;https://github.com/apache/incubator-airflow&quot;
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="python, airflow, celery" scheme="http://blog.yinwoods.work/tags/python-airflow-celery/"/>
    
  </entry>
  
  <entry>
    <title>《Fluent Python》读书笔记</title>
    <link href="http://blog.yinwoods.work/2017/07/25/fluent-python-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.yinwoods.work/2017/07/25/fluent-python-读书笔记/</id>
    <published>2017-07-25T06:12:37.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>第二次读Fluent Python了，记得第一次读的时候总有醍醐灌顶的感觉，但迫于当时刚接触python不久，且没有做读书笔记，所以只是看的时候觉得这本书很好，看过就忘了。第二次读，特意买了纸质版，打算将读书过程中的感想、思考都记录下来，以供他人以及未来的自己参考。</p>
<h3 id="第二章-An-Array-of-Sequences"><a href="#第二章-An-Array-of-Sequences" class="headerlink" title="第二章 An Array of Sequences"></a>第二章 An Array of Sequences</h3><ul>
<li>Pg46: 借用二分搜索来实现多重条件判断，这样的操作值得借鉴：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(score, breakpoints=[<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>], grades=<span class="string">'FDCBA'</span>)</span>:</span></div><div class="line">    i = bisect.bisect(breakpoints, score)</div><div class="line">    <span class="keyword">return</span> grades[i]</div></pre></td></tr></table></figure>
<ul>
<li><p>Pg48: 大量数值的读写以及相关操作最好使用针对数值优化的array而不是list</p>
</li>
<li><p>Pg51: 大量数据的复制可以借助memoryview</p>
</li>
</ul>
<h3 id="第三章-Dictionaries-and-Sets"><a href="#第三章-Dictionaries-and-Sets" class="headerlink" title="第三章 Dictionaries and Sets"></a>第三章 Dictionaries and Sets</h3><ul>
<li>Pg70: 在使用dict的过程中，因为很多时候难以确定key是否在dict中存在，因此会先利用get方法取key对应的value，在对value进行一些操作之后再update dict，这样的操作会显得很琐碎，很多时候可以借助dict.setdefault()方法来完成上述一系列操作。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt = dict(one=<span class="number">1</span>, two=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt.setdefault(<span class="string">'three'</span>, <span class="number">0</span>)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt.update(&#123;<span class="string">'three'</span>: dt.setdefault(<span class="string">'three'</span>, <span class="number">0</span>) + <span class="number">3</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt</div><div class="line">&#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt.update(&#123;<span class="string">'one'</span>: dt.setdefault(<span class="string">'one'</span>, <span class="number">0</span>) + <span class="number">3</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt</div><div class="line">&#123;<span class="string">'one'</span>: <span class="number">4</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>Pg70: 在dict上做一些操作时，很多时候我们希望直接利用[key]形式取值时不产生<code>KeyError</code>，为了解决这个问题，有两种方案；一种是借用defaultDict，另一种则是继承dict类并自己实现<strong>missing</strong>方法</p>
</li>
<li><p>Pg78: python标准库中并没有提供只读的dict，但是可以借用types中的MappingProxyType来实现相关功能，但需要注意的是MappingProxyType实例会随着传递进来的dict改变而改变</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MappingProxyType</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="number">1</span>: <span class="string">'A'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy = MappingProxyType(d)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy</div><div class="line">mappingproxy(&#123;<span class="number">1</span>: <span class="string">'A'</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">1</span>]</div><div class="line"><span class="string">'A'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">2</span>] = <span class="string">'x'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: <span class="string">'mappingproxy'</span> object does <span class="keyword">not</span> support item assignment</div><div class="line"><span class="string">'mappingproxy'</span> object does <span class="keyword">not</span> support item assignment</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">2</span>] = <span class="string">'B'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy</div><div class="line">mappingproxy(&#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">2</span>]</div><div class="line"><span class="string">'B'</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二次读Fluent Python了，记得第一次读的时候总有醍醐灌顶的感觉，但迫于当时刚接触python不久，且没有做读书笔记，所以只是看的时候觉得这本书很好，看过就忘了。第二次读，特意买了纸质版，打算将读书过程中的感想、思考都记录下来，以供他人以及未来的自己参考。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="python" scheme="http://blog.yinwoods.work/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python requests库处理302重定向</title>
    <link href="http://blog.yinwoods.work/2017/06/24/python-requests%E5%BA%93%E5%A4%84%E7%90%86302%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://blog.yinwoods.work/2017/06/24/python-requests库处理302重定向/</id>
    <published>2017-06-24T11:10:37.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近接了一个活，给定一些链接，统计每个链接的跳转次数以及最终跳转至的网址。</p>
<p>刚开始是用scrapy写的，通过Google与stack overflow了解到下面这种写法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">conn = pymysql.connect(</div><div class="line">        host=<span class="string">'host'</span>,</div><div class="line">        user=<span class="string">'user'</span>,</div><div class="line">        password=<span class="string">'password'</span>,</div><div class="line">        db=<span class="string">'database'</span>)</div><div class="line">cursor = conn.cursor()</div><div class="line"></div><div class="line">sql = <span class="string">'''</span></div><div class="line">    select distinct click_url from table</div><div class="line">    where country = "&#123;&#125;" and status=0'''.format(country)</div><div class="line">cursor.execute(sql)</div><div class="line">urls = cursor.fetchall()</div><div class="line">start_urls = (x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> urls)</div><div class="line"></div><div class="line"><span class="comment"># 无限跳转 测试使用</span></div><div class="line"><span class="comment"># start_urls = ('http://maoshuai.sinaapp.com/cnblog/302test.php', )</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</div><div class="line">        <span class="keyword">yield</span> scrapy.Request(url, meta=&#123;<span class="string">'original_url'</span>: url&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    <span class="comment"># print('response url', response.url)</span></div><div class="line">    <span class="comment"># print('response status', response.status)</span></div><div class="line">    request = response.request</div><div class="line">    redirected_url = request.url</div><div class="line"></div><div class="line">    original_url = response.meta[<span class="string">'original_url'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> original_url <span class="keyword">not</span> <span class="keyword">in</span> self.redirect_count.keys():</div><div class="line">        self.redirect_count.update(&#123;original_url: <span class="number">0</span>&#125;)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> response.status &gt;= <span class="number">300</span> <span class="keyword">and</span> response.status &lt; <span class="number">400</span>:</div><div class="line"></div><div class="line">        self.redirect_count[original_url] += <span class="number">1</span></div><div class="line">        location = to_native_str(</div><div class="line">                response.headers[<span class="string">'location'</span>].decode(<span class="string">'latin1'</span>))</div><div class="line">        request = response.request</div><div class="line">        redirected_url = urljoin(request.url, location)</div><div class="line">        <span class="comment"># print('redirected to ', redirected_url)</span></div><div class="line">        <span class="keyword">yield</span> scrapy.Request(</div><div class="line">                redirected_url,</div><div class="line">                meta=&#123;<span class="string">'original_url'</span>: original_url&#125;,</div><div class="line">                callback=self.parse)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        redirected = request.replace(</div><div class="line">                url=redirected_url, method=<span class="string">'GET'</span>, body=<span class="string">''</span>)</div><div class="line">        redirected.headers.pop(<span class="string">'Content-Type'</span>, <span class="keyword">None</span>)</div><div class="line">        redirected.headers.pop(<span class="string">'Content-Length'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">yield</span> redirected</div><div class="line"></div><div class="line">    count = self.redirect_count.get(original_url)</div><div class="line">    <span class="keyword">if</span> count &gt;= <span class="number">1</span> <span class="keyword">and</span> response.url.startswith(<span class="string">'https://play.google.com'</span>):</div><div class="line">        print(self.redirect_count.get(original_url))</div><div class="line">        self.update_count(</div><div class="line">                original_url, self.redirect_count.get(original_url))</div></pre></td></tr></table></figure>
<p>大致说一下上面代码的思路，在start_requests中，yield request时携带原始URL，从而利用dict统计该URL的跳转次数；parse函数是核心功能代码，用于处理302重定向，通过递归调用parse函数处理重定向后的URL。</p>
<p>上面这种代码是可行的，但是由于需要在生产环境中运行代码，而自己对上面代码的整个执行流程不够清楚，因此最后还是选用requests库来解决该问题，尽管速度上会慢一些，但是自己对整个程序的执行有更清晰的把控。（PS：也是从这里我意识到当性能不是程序的瓶颈时，一定不要牺牲稳定性来提升程序性能，这种行为带来的代价往往是巨大的！）</p>
<p>改用requests改写后，写起来很轻松，因为使用response.history就可以轻松获取重定向最终链接以及中间重定向次数。具体代码参考<a href="http://docs.python-requests.org/en/master/user/quickstart/" target="_blank" rel="external">requests官方文档</a>即可。</p>
<p>但随后又有了新需求，当使用移动客户端访问这些链接时，链接可能最终跳转至以<code>market://</code>开头的URL，而这种URL会被requests认为是无效URL而报错，为了能够正确处理这种情况，也即获取以<code>market://</code>开头的最终URL以及中间的跳转次数，很明显简单地使用response.history无法达到目的。</p>
<p>当然，如果在访问一个URL时，禁止重定向，然后自行处理重定向过程也是一个可行的办法。但是在实践中遇到302中response的Location字段跳转至本站根域名下的其他链接，也就是说Location字段保存的是一个相对URL，因此自行处理重定向就需要额外处理相对URL，这让重定向问题又一步复杂化，故放弃这个方法。</p>
<p>之后想到的方法是查阅官方文档，相信官方文档应该有对重定向问题更加自定义的支持。果不其然，在官方文档的角落里翻阅到requests中有<code>resolve_redirects()</code>方法，虽然文档中对该方法无较多介绍，但通过Google大法也是找到了一些代码片段，通过对代码进行加工改造，得到能够完美解决我的难题的以下代码版本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">iter_send</span><span class="params">(self, session, request, **kwargs)</span>:</span></div><div class="line">    <span class="comment"># 返回重定向过程中一系列response</span></div><div class="line">    <span class="comment"># 如果最终结果为应用内跳转url，类似market://形式则返回上一个response</span></div><div class="line">    resp = session.send(request, allow_redirects=<span class="keyword">False</span>,</div><div class="line">                        timeout=<span class="number">10</span>, **kwargs)</div><div class="line">    redir_iter = session.resolve_redirects(resp, request, timeout=<span class="number">10</span>)</div><div class="line">    <span class="keyword">while</span> resp.is_redirect:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            resp = next(redir_iter)</div><div class="line">            <span class="keyword">yield</span> resp</div><div class="line">        <span class="keyword">except</span> requests.exceptions.InvalidSchema:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">yield</span> resp</div></pre></td></tr></table></figure>
<p>虽然问题的整个解决过程自己没有进行复杂地编程，但是可以发现代码写的多了能够训练出程序员的一种直觉，接着再去验证自己的直觉往往能够节省很多时间，可见经验的重要性了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近接了一个活，给定一些链接，统计每个链接的跳转次数以及最终跳转至的网址。&lt;/p&gt;
&lt;p&gt;刚开始是用scrapy写的，通过Google与stack overflow了解到下面这种写法：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="python, requests" scheme="http://blog.yinwoods.work/tags/python-requests/"/>
    
  </entry>
  
  <entry>
    <title>BK树数据结构学习</title>
    <link href="http://blog.yinwoods.work/2017/04/09/BK%E6%A0%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.yinwoods.work/2017/04/09/BK树数据结构学习/</id>
    <published>2017-04-08T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>BK树是一种基于树的数据结构，用来快速查找基于编辑距离的相似字符串匹配，比如拼写纠错或模糊查找。许多软件中的自动拼写纠错就是基于这个数据结构来实现的。</p>
<p>BK树中的每一个节点都是词典中的一个单词，而树中的边权重则表明叶子结点到根节点之间的编辑距离。例如从节点u到节点v的边上权重为w，那么w就是把u转化为v的编辑距离。</p>
<p>例如对于词典<code>{&quot;help&quot;, &quot;hell&quot;, &quot;hello&quot;}</code>，其对应的BK树如下：</p>
<p><img src="http://7xlnl2.com1.z0.glb.clouddn.com/2017-04-09-1.png" alt="BK树"></p>
<p>BK树中的每个节点与子节点的编辑距离值都是唯一的，在插入节点的过程中如果编辑距离与当前节点和子节点之间的编辑距离相同，则考虑插入到下一个节点上。BK树每次插入均从根结点开始，根节点可以是词典中的任意一个单词。</p>
<p>例如向上述词典插入新单词<code>shell</code>时插入过程如下：</p>
<ul>
<li>比较shell与根节点help的编辑距离，得到2</li>
<li>发现根节点已经存在编辑距离为2的子节点hello，因此尝试将shell插入到子节点hello上</li>
<li>比较shell与hello的编辑距离，因为hello没有编辑距离为2的子节点，因此插入</li>
</ul>
<p>得到下图：<br><img src="http://7xlnl2.com1.z0.glb.clouddn.com/2017-04-09-2.png" alt="新的BK树"></p>
<p>对于一个给定的TOL（tolerance value）作为编辑距离的上限，我们使用BK树来查找与给定节点N编辑距离小于等于TOL的过程如下：</p>
<blockquote>
<p>计算给定节点N与根节点的编辑距离D，接着继续搜索与根节点编辑距离在[D - TOL, D + TOL]之间的子节点。重复这个过程知道找到所有满足条件的节点。</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="built_in">string</span> word;</div><div class="line">    <span class="comment">// next[i]中保存的值为与word编辑距离为i的词在tree中的下标</span></div><div class="line">    <span class="keyword">int</span> next[<span class="number">2</span> * LEN];</div><div class="line"></div><div class="line">    Node(<span class="built_in">string</span> x): word(x) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>*LEN; ++i) &#123;</div><div class="line">            next[i] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node():word() &#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">Node RT;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">2</span> * LEN][<span class="number">2</span> * LEN];</div><div class="line">Node tree[MAXN];</div><div class="line"></div><div class="line"><span class="keyword">int</span> ptr = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> min(min(a, b), c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">editDistance</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span> </span>&#123;</div><div class="line">    <span class="comment">// 动态规划获取最短编辑距离</span></div><div class="line">    <span class="keyword">int</span> a_len = a.length();</div><div class="line">    <span class="keyword">int</span> b_len = b.length();</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=a_len; ++i)</div><div class="line">        dp[i][<span class="number">0</span>] = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=b_len; ++j)</div><div class="line">        dp[<span class="number">0</span>][j] = j;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=a_len; ++i) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=b_len; ++j) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i<span class="number">-1</span>] != b[j<span class="number">-1</span>]) &#123;</div><div class="line">                dp[i][j] = min(<span class="number">1</span> + dp[i<span class="number">-1</span>][j],      <span class="comment">// deletion</span></div><div class="line">                               <span class="number">1</span> + dp[i][j<span class="number">-1</span>],      <span class="comment">// insertion</span></div><div class="line">                               <span class="number">1</span> + dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);   <span class="comment">// replacement</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[a_len][b_len];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Node &amp;root, Node &amp;cur)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(root.word.length() == <span class="number">0</span>) &#123;</div><div class="line">        root = cur;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> distance = editDistance(cur.word, root.word);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(tree[root.next[distance]].word.length() == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 若与root编辑距离为distance的位置没有节点，则将该节点标记为叶子结点</span></div><div class="line">        ++ptr;</div><div class="line">        tree[ptr] = cur;</div><div class="line">        root.next[distance] = ptr;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        add(tree[root.next[distance]], cur);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; getSimilarWords(Node &amp;root, <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> TOL) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(root.word == <span class="string">""</span>)</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> distance = editDistance(root.word, s);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(distance &lt;= TOL)</div><div class="line">        ret.push_back(root.word);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> start = distance - TOL;</div><div class="line">    <span class="keyword">if</span>(start &lt; <span class="number">0</span>)</div><div class="line">        start = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(start &lt; distance + TOL) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tmp = getSimilarWords(tree[root.next[start]], s, TOL);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : tmp) &#123;</div><div class="line">            ret.push_back(i);</div><div class="line">        &#125;</div><div class="line">        ++start;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> dictionary[] = &#123;<span class="string">"hello"</span>, <span class="string">"help"</span>, <span class="string">"shel"</span>, <span class="string">"smell"</span>, <span class="string">"fell"</span>,</div><div class="line">                           <span class="string">"felt"</span>, <span class="string">"oops"</span>, <span class="string">"pop"</span>, <span class="string">"oouch"</span>, <span class="string">"halt"</span>&#125;;</div><div class="line"></div><div class="line">    ptr = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(dictionary) / <span class="keyword">sizeof</span>(<span class="built_in">string</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sz; ++i) &#123;</div><div class="line">        Node temp = Node(dictionary[i]);</div><div class="line">        add(RT, temp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">string</span> w1 = <span class="string">"ops"</span>;</div><div class="line">    <span class="built_in">string</span> w2 = <span class="string">"helt"</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; match = getSimilarWords(RT, w1, <span class="number">2</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"similar words in dictionary for: "</span> &lt;&lt; w1 &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : match) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"- "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    match = getSimilarWords(RT, w2, <span class="number">2</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"similar words in dictionary for: "</span> &lt;&lt; w2 &lt;&lt; <span class="string">":"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : match) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"* "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>BK树的应用：</p>
<p>一般提到BK树，了解这个数据结构的人都会想到单词纠错。而最近看到一遍博文讲述了如何使用BK树实现海量图片的去重（找到与给定图片编辑距离在上限范围内的所有图片并删除），其实仔细想一想对BK树应用的正确理解应该是基于相似度搜索结果，而不应该简单粗暴地理解为单词纠错（其实也是模糊查询）这种典型的应用场景，这样的认知有时候可能会限制我们在实际场景中对脑海中知识的变现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BK树是一种基于树的数据结构，用来快速查找基于编辑距离的相似字符串匹配，比如拼写纠错或模糊查找。许多软件中的自动拼写纠错就是基于这个数据结构来实现的。&lt;/p&gt;
&lt;p&gt;BK树中的每一个节点都是词典中的一个单词，而树中的边权重则表明叶子结点到根节点之间的编辑距离。例如从节点u到
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="data structure" scheme="http://blog.yinwoods.work/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>2016年年终总结</title>
    <link href="http://blog.yinwoods.work/2016/12/30/2016%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.yinwoods.work/2016/12/30/2016年年终总结/</id>
    <published>2016-12-29T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉2016就要结束了,也到了交上自己2016年答卷的时候了。欲扬先抑的2016年年终总结，先从坏消息开始吧。</p>
<h3 id="2016年遗憾的"><a href="#2016年遗憾的" class="headerlink" title="2016年遗憾的"></a>2016年遗憾的</h3><p>其实从自己内心深处来说，没有觉得2016年有什么遗憾，但作为年终总结如果一点遗憾都没有也确实说不过去:)。</p>
<p>最大的遗憾是答应自己去日本旅行的承诺没有做到吧，原因是签证太难办了，尤其对我来说。。。所以暑假的毕业旅行选择了梅开两度——云南，也还算玩的开心吧，不过因为是第二次去，所以某种程度上成了基友团的导游，真真是痛并快乐着。</p>
<h3 id="2016年失去的"><a href="#2016年失去的" class="headerlink" title="2016年失去的"></a>2016年失去的</h3><p>2016年失去了一些坚持了很久的东西，比如对一个人持续了几年的喜欢，当然我承认这种喜欢本身就是不理智、畸形的，不过它也是倾入心血、不求回报的。anyway，路过了，失去了，没什么可遗憾的。</p>
<h3 id="2016年变本加厉的"><a href="#2016年变本加厉的" class="headerlink" title="2016年变本加厉的"></a>2016年变本加厉的</h3><p>2016年的自己人情味好像又跌了。。。以前大概有个50%？现在可能只剩下20-30%了？细思极恐，反思这一年中的自己确实如朋友所说经常摆个臭脸，一脸高冷（非褒义）。虽然和朋友在一起时还可以做到欢声笑语，但大多时候真的是绷着臭脸一言不发啊，也许这也是我研究生入学到现在新认识女生个数为0的原因？哈哈哈。不过话说回来，作为一个20多岁社会人员预备役研究生，这些缺点自己一直是心里有数的，之所以没有改不是因为自己无能为力，而是我需要。三点原因吧:</p>
<ul>
<li><p>实验室的氛围总是透露着迷之尴尬的气息（非常适合现阶段的我），确实不适合整天嘻嘻哈哈、没心没肺的生活；</p>
</li>
<li><p>出于屏蔽外界干扰，专心做事的考虑吧，毕竟精力有限，而且自己想要做的事需要倾入绝大部分精力；</p>
</li>
<li><p>自己一直以来有个臭毛病：太大嘴巴啦。。。所以万言万当，不如一默；</p>
</li>
</ul>
<h3 id="2016年改正的"><a href="#2016年改正的" class="headerlink" title="2016年改正的"></a>2016年改正的</h3><p>首推大嘴巴。。。怎么以前自己想说的话就那么多呢，而且大多数时候都是出于夸耀自己技术上的一些微不足道的小成就。所幸在2016年的小尾巴从手中流逝之际改掉了，其实2015年自己社交圈子基本全部噤声，怎么2016年就像打了鸡血一样，一直BB叨BB叨。。。当然之所以改掉了这个缺点倒不只是说在社交圈子内发声变少，而是源于对自己内心深处的审视，未来自己觉得好的东西可能还是会分享，可是不再希望全世界都知道了，毕竟生活是自己的。</p>
<h3 id="2016年收获的"><a href="#2016年收获的" class="headerlink" title="2016年收获的"></a>2016年收获的</h3><p>说了一堆，终于要迈入博客正题了，其实2016年归根到底，自己的收获远远大于收入的，也不局限于技术方面，而是涵盖生活的各个方面，下面娓娓道来，也算是对自己2016年的收获做一个梳理吧。</p>
<h4 id="技术上收获的"><a href="#技术上收获的" class="headerlink" title="技术上收获的"></a>技术上收获的</h4><p>作为一个程序猿，要是年度总结丝毫不提技术，那这一年得是过得多失败啊:P。2016年可以算是自己正式迈入计算机技术大门门槛的一年吧（现在确实是这么觉得，不知道以后会不会打脸，不过成长不就是不断打脸的过程吗），这一年可以清楚地察觉到自己突破了长期以来的技术瓶颈，本科四年自己很努力，可是苦于没有一个可供深耕的方向，学了一大堆东西，到头来发现能记住、在生活中能运用到的的却寥寥无几。不过也正是因为以前自己学的太杂，所以有了今天的量变到质变转化的过程。引发质变的原因总结下来有以下几个方面吧：</p>
<ul>
<li><p>实习呆的公司是初创公司，什么基础设施都有自己搭建，所以得到了极大的锻炼，外加领导相当有节奏的push，所以成长速度远快于在学校的日子；</p>
</li>
<li><p>进入了一个更高的平台，接触的人、技术也处于一个更高的层次，因此能够在实际生活中从身边的朋友、同事身上学习很多；</p>
</li>
<li><p>在实习过程中对一个程序猿的成长曲线有了一个大致的认知，所以对自己的发展路线也有了一个大致规划；</p>
</li>
<li><p>度过了2015年的舒适区，进入了一个忙碌的阶段，这种突变的环境往往也会导致一个人的突变（for me, technologically）；</p>
</li>
<li><p>自己暑假期间开始阅读英文技术书籍并 <strong>读完</strong> ，放佛打开了新世界的大门啊。。。如果是中文技术资料是V0.1的话，英文资料完全是V2.0啊！！真的强烈推荐做技术的朋友好好学英语， 它远比你想象中有用地多得多；</p>
</li>
</ul>
<p>之所以说这一年自己的技术上产生了质变，原因是现在的自己感觉学什么东西都相当快（对比以前的自己来说）。举几个例子：</p>
<ul>
<li><p>现在可以不客气地说自己熟练掌握了python，原因不仅仅是写了几万行python代码那么简单，学习过程中可是查阅了数量相当庞大的python英文资料啊；</p>
</li>
<li><p>十几天过了一遍《Linux Command Guide》，再加上实习过程中经常亲眼目睹boss使用linux的花式组合命令，自己现在对linux也能够熟练使用了，熟悉后愈发觉得linux是效率神器，使用起来游刃有余。</p>
</li>
<li><p>几天过了一遍《Learn the vi and vim Editors》，对vim的使用以及linux shell的使用自定义配置都有了一定的了解，同效率神器。。。为什么自己现在才深入学习啊啊啊啊</p>
</li>
<li><p>实习过程中完全是ssh远程操作，尤其是大数据相关操作编写mapreduce任务、部署定时任务、搭建docker开发环境以及python tornado后台开发等等。。。</p>
</li>
</ul>
<p>总之，在16年年底回首这一年，我对自己的技术成长是相当满意的，同时也对2017年的自己乃至未来的自己有了更多信心。</p>
<h4 id="心灵上收获的"><a href="#心灵上收获的" class="headerlink" title="心灵上收获的"></a>心灵上收获的</h4><p>16年真的是自己人生迈向新阶段的元年，想想15年的自己颓地就差自暴自弃了。。。现在则对自己有着足够的信心，这些信心源于对自己的认知，认清了自己是怎样的，身边人是怎样的，这个社会又是怎样的，付出了那么多，有什么理由不自信呢？我想一个人的成长过程就是这样吧，此起彼伏、上上下下，可是随着时间的流逝，我们对自己的认知终会趋向于一个理性的区间，说着说着又有些期待下次颓废的自己了，要再遇到什么样的大牛，承受什么样的吊打呢？</p>
<p>自己另一个变化就是能够更清晰地审视自己的未来了吧，提及梦想，自己就充满了斗志。。。干劲十足，打鸡血状态。这种状态吧，就好比有些淘气的小孩子想要吃糖，爸爸妈妈不给，那他哭哑了嗓子也要吃到那块糖，我现在就是这样。。。有些事是真的无论如何也要做到，这么说可能不太合适，是有些事无论如何也要尽力做到吧。哪怕这条路要一个人走，要牺牲很多。但心甘情愿，只有这样自己才会感到开心。</p>
<p>最后一点就是自己一直以来想做的一个改变了，也是我认为自己以前最缺的一点吧：闷声发大财，这样才是最好的，哈哈哈。2017年要低调地划过去～</p>
<h3 id="写过的代码"><a href="#写过的代码" class="headerlink" title="写过的代码"></a>写过的代码</h3><p>今年github提交主要还是自己的博客，忏愧。。。</p>
<p>另外九月份自己写了个针对北航垃圾系统的爬虫爬取个人课表。</p>
<p>明年再接再厉~</p>
<p><img src="http://7xlnl2.com1.z0.glb.clouddn.com/post59-github.jpg" alt="Github"></p>
<h4 id="读过的书"><a href="#读过的书" class="headerlink" title="读过的书"></a>读过的书</h4><p>现在的社交媒体上好像总是倾向于把读书宣扬为一件很优雅、高端的行为。无解。在我眼里它和看电影没什么区别，况且很多人读再多的书脑子里的思想也是臭不可闻。读过的书目、走过的路途，恕我直言，和一个人的三观修养不见得是一个正比例函数，重要的是这些过程中自己的思考吧。所以身边如果有人说他在读鲁迅、茨威格、村上春树等等，我哪怕在读的是街边黄色小书刊也不会觉得自己姿势就低到哪里去了。言归正传，16年读的还是小说、技术书籍居多，有下面这些吧：</p>
<ul>
<li><p>一月：准风月谈</p>
</li>
<li><p>二月：文化的力量</p>
</li>
<li><p>四月：性爱与婚姻、乔家大院、边城</p>
</li>
<li><p>五月：西游记</p>
</li>
<li><p>六月：封神演义、红高粱</p>
</li>
<li><p>七月： <strong>退后，我要开始装逼了。。。</strong> Learn C the Hard Way、操作系统思考、论持久战、行者无疆</p>
</li>
<li><p>八月：Fluent Python、Python Cookbook 3rd Edition、Code Like a Pythonista Idiomatic Python、Intermediate Python、Web Scraping with Python</p>
</li>
<li><p>九月：一个陌生女人的来信</p>
</li>
<li><p>十月：Algorithm Unplugged</p>
</li>
<li><p>十一月：The Linux Command Line、 Pro Git</p>
</li>
<li><p>十二月：Learn the Vi and Vim、Hadoop with Python</p>
</li>
</ul>
<h4 id="看过的电影"><a href="#看过的电影" class="headerlink" title="看过的电影"></a>看过的电影</h4><p>看过的电影还真不少，主要集中在上半年的实习过程中，研究生入学以后最新科研，看得电影也少了。。。</p>
<p>详情见<a href="https://movie.douban.com/standbyme/2016/share?source=broadcast&amp;user_id=79236503" target="_blank" rel="external">链接</a></p>
<h4 id="听过的歌"><a href="#听过的歌" class="headerlink" title="听过的歌"></a>听过的歌</h4><p>16年因为实习过程中在路上的时间很多，所以听的歌也很多，一年大概听了有3000+首？也是在这一年确定了自己最爱的音乐类型：电音；</p>
<h4 id="去过的地方"><a href="#去过的地方" class="headerlink" title="去过的地方"></a>去过的地方</h4><p>说来忏愧，今年真的是没去哪里浪，最起码和自己的预期还是有很大差距的。远的地方就去了南京、扬州、昆明、大理；近的地方则去了香山（自己说出来都嫌丢人。。。）、青龙峡、十渡。</p>
<h4 id="亲情上收获的"><a href="#亲情上收获的" class="headerlink" title="亲情上收获的"></a>亲情上收获的</h4><p>因为是个人总结，所以不想深谈自己的家庭等等。总之16年一切都迈上了正规，作为掌舵人，会让一切越来越好。</p>
<p><img src="http://7xlnl2.com1.z0.glb.clouddn.com/post59-2017.jpg" alt="2017"></p>
<h3 id="2017期待的"><a href="#2017期待的" class="headerlink" title="2017期待的"></a>2017期待的</h3><p>说完了16年的总结，免不了俗地要谈谈17年的小目标了，给自己立几个够得着的FLAG（话说立过的FLAG好像还没倒过）。</p>
<h4 id="技术上"><a href="#技术上" class="headerlink" title="技术上"></a>技术上</h4><p>上半年会继续深入后端，上半年仍然以python作为主力开发语言，其中函数式编程与协程是自己的两个主要突破点，另外继续深入学习使用linux、vim、python web开发框架。</p>
<p>下半年则会系统地过一遍C++，掌握网络、操作系统等知识（主要指一些较低层的知识）。</p>
<p>自己打算掌握的一些零碎或目前还一直半解的相关概念，完善知识体系：</p>
<ul>
<li><p>redis、memcache</p>
</li>
<li><p>hadoop架构及生态</p>
</li>
<li><p>docker重度使用</p>
</li>
<li><p>unikernel使用</p>
</li>
<li><p>NoSQL非结构化数据库</p>
</li>
<li><p>深度学习的应用及前景</p>
</li>
</ul>
<p>另外计划开发一个针对实验室报销的报账系统，节省自己报账时间；还有系统地读一些Github优质源代码，书签里已经躺了几个。</p>
<p>当然，重头戏总要放在最后，17年打算迈入前端大门，就以自己的博客为实验小白鼠，边学边练，将博客来一次彻头彻尾的改变（做的过程中学会以产品的角度来看待整个博客）。</p>
<p>最后实现将自己技术体系中前端、后端打通的目标。但应该仍然会以后端为主（但也不排除学习过程中发现前端太好玩，转前端为主的可能性）。</p>
<h4 id="性格上"><a href="#性格上" class="headerlink" title="性格上"></a>性格上</h4><p>性格上想要改变的地方有：</p>
<ul>
<li><p>改善自己绷着个脸的臭毛病（不是根除）</p>
</li>
<li><p>学会寒暄，神特么秘制技能，我现在是真的一点不会</p>
</li>
<li><p>多看少说</p>
</li>
<li><p>急人所需，多关心身边的朋友、亲人</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉2016就要结束了,也到了交上自己2016年答卷的时候了。欲扬先抑的2016年年终总结，先从坏消息开始吧。&lt;/p&gt;
&lt;h3 id=&quot;2016年遗憾的&quot;&gt;&lt;a href=&quot;#2016年遗憾的&quot; class=&quot;headerlink&quot; title=&quot;2016年遗憾的&quot;&gt;&lt;
    
    </summary>
    
      <category term="diary" scheme="http://blog.yinwoods.work/categories/diary/"/>
    
    
      <category term="thoughts" scheme="http://blog.yinwoods.work/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>vim 学习笔记</title>
    <link href="http://blog.yinwoods.work/2016/12/04/vim%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.yinwoods.work/2016/12/04/vim学习笔记/</id>
    <published>2016-12-03T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Chapter-3-Moving-Around-in-a-Hurry"><a href="#Chapter-3-Moving-Around-in-a-Hurry" class="headerlink" title="Chapter 3 Moving Around in a Hurry"></a>Chapter 3 Moving Around in a Hurry</h3><p>^F: scroll forward one screen.<br>^B: scroll backward one screen.</p>
<p>^D: scroll forward half screen.<br>^U: scroll backward half screen.</p>
<p>^E: scroll forward one line.<br>^Y: scroll backward one line.</p>
<p>zENTER: move current line to top of screen and scroll.<br>z.: move current line to center of screen and scroll.<br>z-: move current line to bottom of screen and scroll.</p>
<p>H: move to home-the top line of screen.<br>M: move to middle line of screen.<br>L: move to bottom line of screen.</p>
<p>ENTER: move to first character of next line.<br>+: move to first character of next line.<br>-: move to first character of previous line.</p>
<p>^: move to first nonblank character of current line.<br>n|: move to column n of current line.</p>
<p>e: move to end of word.<br>E: move to end of ward(ignore punctuation)</p>
<p>(: move to begining of current sentence.<br>): move to begining of next sentence.</p>
<p>{: move to begining of current paragraph.<br>}: move to begining of next paragraph.</p>
<p>[[: move to begining of current section.<br>]]: move to begining of next section.</p>
<p>/pattern: search forward for pattern.<br>?pattern: search backward for pattern.</p>
<p>n: repeat last search.<br>N: repeat last search in opposite direction.</p>
<p>/: repeat last search forward.<br>?: repeat last search backward.</p>
<p>fx: find next occurrence of x in the line, where x stands for any character.<br>Fx: find previous occurrence of x in the line.</p>
<p>tx: find character before next occurrence of x in the line.<br>Tx: find character after previous occurrence of x in the line.</p>
<p>;: repeat previous find command in same direction.<br>,: repeat previous find command in opposite direction.</p>
<p><code>: returns you to your original position(the position where you issued the last G command).
&#39;&#39;: act same as</code>, except that it returns the cursor to the begining of the line.</p>
<p>^G: show current line(not a movement command)</p>
<h3 id="Chapter-4-Beyond-the-Basics"><a href="#Chapter-4-Beyond-the-Basics" class="headerlink" title="Chapter 4 Beyond the Basics"></a>Chapter 4 Beyond the Basics</h3><p>vim +n file: opens file at line number n<br>vim + file: opens file at last line<br>vim +/pattern file: opens file at the first occurence of pattern<br>vim -c command file: run command after opening file, usually a line number or a search.</p>
<p>vim -R file: operate in read-only mode.<br>vim -r file: recover files after a crash.<br>view file: to look at a file in read-only mode.</p>
<p>“[a-z]command: do command with buffer [a-z].<br>“[a-z]p: put the contents of buffer [a-z] after cursor.<br>“[A-Z]command: accumulate the text dealed by command to buffer named [a-z].</p>
<p>mx: mark current position with x.<br>‘x: move cursor to first character of the line marked by x.<br>`x: move cursor to character marked by x.<br>``: return to exact position of previous mark or context after a move.<br>‘’: return to begining of the line of previous mark or context.</p>
<h3 id="Chapter-5-Introducint-the-ex-Editor"><a href="#Chapter-5-Introducint-the-ex-Editor" class="headerlink" title="Chapter 5 Introducint the ex Editor"></a>Chapter 5 Introducint the ex Editor</h3><p>=: print total number of lines.<br>.=: print line number of current line.<br>/pattern/=: print line number of first line that matches pattern.</p>
<p>start,end[delete|d]: delete lines.<br>start,end[move|m]number: move lines from start through end to number line.<br>start,end[copy|co|t]number: copy lines from start through end to number line.</p>
<p>/pattern/d: delete next line containing pattern.<br>/pattern/+d: delete line below next line containing pattern.<br>/patter1/,/pattern2/d: delete from first line containing patter1 through first line containing pattern2.</p>
<p>g/pattern: find last occurence of pattern in file.<br>g/pattern/p: find and display all lines in file containing pattern.<br>g!/pattern/nu: find and diaplay all lines in file that don’t contain pattern;also display the line number for each line found.</p>
<p>[read|r] filename: read in contents of another file with ex command. </p>
<h3 id="Chapter-6-Global-Replacement"><a href="#Chapter-6-Global-Replacement" class="headerlink" title="Chapter 6 Global Replacement"></a>Chapter 6 Global Replacement</h3><p>put troff italicization codes around the wrod ENTER: :%s/ENTER/\fI&amp;\fP/g</p>
<p>modify a list of pathnames in a file: :%s:/home/time:/home/linda:g</p>
<p>put html italicization codes around the wrod ENTER: :%s:ENTER:<i>&amp;</i>:g</p>
<p>change all periods to semicolons in lines 1 to 10: :1,10s/./;/g</p>
<p>change all occurrences of the word help (or Help) to HELP: :%s/[Hh]elp/HELP/g</p>
<p>replace one or more spaces with a single space: :%s/  */ /g</p>
<p>replace one or more spaces following a colon with two spaces: :%s/:  */:  /g</p>
<p>replace one or more spaces following a period or a colon with two spaces: :%s/([:.])  */\1  /g</p>
<p>standardize various uses of a word or heading: :%s/^Note[ :s]*/Notes: /g</p>
<p>delete all blank lines: :g/^$/d</p>
<p>delete all blank lines, plus any lines that contain only whitespace: :g/^[ tab]*$/d</p>
<p>delete all leading spaces on every line: :%s/^  <em>(.</em>)/\1/</p>
<p>delete all spaces at the end of every line: :%s/(.<em>)  </em>$/\1/</p>
<p>insert a &gt;  at the start of every line in a file: :%s/^/&gt;  /</p>
<p>add a period to the end of the next six lines: :.,+5s/$/./</p>
<p>reverse the order of all hyphen-separated items in a list: :%s/(.<em>) - (.</em>)/\2 - \1/</p>
<p>change every letter in a file to uppercase: :%s/.*/\U&amp;/</p>
<p>reverse the order of lines in a file: :g/.*/mo0</p>
<p>in a text-file database, on all lines not marked Paid in full, append the phrase Overdue: :g!/Paid in full/s/$/ Overdue/</p>
<p>for any line that doesn’t begin with a number, move the line to the end of the file: :g!/^[[:digit:]]/m$</p>
<p>remove numbering from section headings in a document: :%s/^[1-9][0-9]<em>.[1-9][0-9.]</em> //</p>
<h3 id="Chapter-7-Advanced-Editing"><a href="#Chapter-7-Advanced-Editing" class="headerlink" title="Chapter 7 Advanced Editing"></a>Chapter 7 Advanced Editing</h3><p>execute unix command: !command<br>enter shell without exit vim: !sh</p>
<p>examples: r!date, r!sort file, !ls</p>
<p>filter text in ex: start,end!sort</p>
<p>word abbreviation: ab abbr phrase</p>
<p>disable abbreviation: unab abbr</p>
<p>map x sequence : define character x as a sequence of editing commands.<br>unmap x: disable the squence defined for x.<br>map: list the characters that are currently mapped.</p>
<h3 id="Chapter-11-Multiple-Windows-in-Vim"><a href="#Chapter-11-Multiple-Windows-in-Vim" class="headerlink" title="Chapter 11: Multiple Windows in Vim"></a>Chapter 11: Multiple Windows in Vim</h3><p>vim -o[number] file1 file2: opens the edit session with display hrizontally split into number(default is two) equal-sized windows, one for each file.</p>
<p>[n]split [++opt] [+cmd] [file]:<br>n: tells how many lines to display in the new window, which goes at the top.<br>opt: passes vim option information to the new window session (note that it must be preceded by two plus signs).<br>cmd: passes a command for execution in the new window (note that it must be preceded by a single plus sign).<br>file: specifies a file to edit in the new window.</p>
<p>sviw filename: splits screen horizontally to open a new window and sets readonly for that buffer.<br>sfind [++opt] [+cmd] filename: works like :split, but looks for filename in path. if vim does not find the file, it doesn’t split the window.</p>
<p>resize -n: decrease current window size, default amount is one line.<br>resize +n: increase current window size, default amount is one line.</p>
<p>resize n: set current window height, default is to maximize window height.<br>vertical resize n: set current window width to n. default is to make window as wide as possible.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Chapter-3-Moving-Around-in-a-Hurry&quot;&gt;&lt;a href=&quot;#Chapter-3-Moving-Around-in-a-Hurry&quot; class=&quot;headerlink&quot; title=&quot;Chapter 3 Moving Around 
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="tools, linux" scheme="http://blog.yinwoods.work/tags/tools-linux/"/>
    
  </entry>
  
  <entry>
    <title>含随机指针的单链表/二叉树的深度拷贝</title>
    <link href="http://blog.yinwoods.work/2016/10/24/%E5%90%AB%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://blog.yinwoods.work/2016/10/24/含随机指针的单链表二叉树的深度拷贝/</id>
    <published>2016-10-23T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、包含随机指针的单链表的深度拷贝"><a href="#一、包含随机指针的单链表的深度拷贝" class="headerlink" title="一、包含随机指针的单链表的深度拷贝"></a>一、包含随机指针的单链表的深度拷贝</h3><p>最近遇到一道很有趣的题目：<code>给定每个节点都包含随机指针的单链表，问如何深度拷贝这个单链表？</code></p>
<p>类似的单链表如图所示：</p>
<p><img src="http://7xlnl2.com1.z0.glb.clouddn.com/post57-2.jpg" alt="图1"></p>
<p>总结了下看到的答案，大致可分为三种方法：</p>
<h4 id="1、暴力复制（很朴素的方法）"><a href="#1、暴力复制（很朴素的方法）" class="headerlink" title="1、暴力复制（很朴素的方法）"></a>1、暴力复制（很朴素的方法）</h4><p>因为随机指针可能指向当前节点之后的节点，所以考虑分两步来做。</p>
<p>第一步遍历单链表，拷贝节点及节点的next指针，不考虑节点的random指针。结束后得到一个新的单链表。</p>
<p>第二步遍历原单链表，如果当前访问节点A有random指针指向节点B，则在新的单链表中找到相应的节点AA以及random所指向节点BB，令AA-&gt;random = BB。</p>
<p>时间复杂度：O(N2)</p>
<h4 id="2、通过节点映射关系实现深度拷贝"><a href="#2、通过节点映射关系实现深度拷贝" class="headerlink" title="2、通过节点映射关系实现深度拷贝"></a>2、通过节点映射关系实现深度拷贝</h4><p>考虑第一种方法可以发现时间主要耗费在复制random指针的过程中需要查找相应的节点，因此可想到如果能够建立原单链表与新单链表节点之间的映射关系，那么只需遍历一次即可完成random指针的拷贝。详细步骤如下：</p>
<p>第一步遍历单链表，拷贝节点及节点的next指针，不考虑节点的random指针。结束后得到一个新的单链表。</p>
<p>第二步遍历原单链表，如果当前访问节点A有random指针指向节点B，则令map[A]-&gt;random = map[B]即可。</p>
<p>故只需要两次遍历，时间复杂度为O(2N)</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> key;</div><div class="line">    Node *next, *random;</div><div class="line">    Node(<span class="keyword">int</span> k, Node *nt, Node *rand): key(k), next(nt), random(rand) &#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInOrder</span><span class="params">(Node *node)</span> </span>&#123;</div><div class="line"></div><div class="line">    Node* curNode = node;</div><div class="line">    <span class="keyword">while</span>(curNode != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"[ "</span> &lt;&lt; curNode-&gt;key &lt;&lt; <span class="string">", "</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(curNode-&gt;random == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL ] -&gt; "</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; curNode-&gt;random-&gt;key &lt;&lt; <span class="string">" ] -&gt; "</span>;</div><div class="line">        &#125;</div><div class="line">        curNode = curNode-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">copyLinkedList</span><span class="params">(Node* treeNode, <span class="built_in">map</span>&lt;Node*, Node*&gt; *mymap)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(treeNode == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    Node* headNode = <span class="keyword">new</span> Node(treeNode-&gt;key, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node* curNode = headNode;</div><div class="line">    (*mymap)[treeNode] = headNode;</div><div class="line"></div><div class="line">    treeNode = treeNode-&gt;next;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(treeNode != <span class="literal">NULL</span>) &#123;</div><div class="line"></div><div class="line">        Node* cloneNode = <span class="keyword">new</span> Node(treeNode-&gt;key, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">        (*mymap)[treeNode] = cloneNode;</div><div class="line"></div><div class="line">        curNode-&gt;next = cloneNode;</div><div class="line">        curNode = curNode-&gt;next;</div><div class="line">        treeNode = treeNode-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> headNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyRandom</span><span class="params">(Node* treeNode, Node* cloneNode, <span class="built_in">map</span>&lt;Node*, Node*&gt; *mymap)</span> </span>&#123;</div><div class="line"></div><div class="line">    Node* headNode = cloneNode;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(treeNode != <span class="literal">NULL</span>) &#123;</div><div class="line">        cloneNode-&gt;random = (*mymap)[treeNode-&gt;random];</div><div class="line"></div><div class="line">        treeNode = treeNode-&gt;next;</div><div class="line">        cloneNode = cloneNode-&gt;next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cloneNode = headNode;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">cloneList</span><span class="params">(Node* tree)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(tree == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="built_in">map</span>&lt;Node*, Node*&gt; *mymap = <span class="keyword">new</span> <span class="built_in">map</span>&lt;Node*, Node*&gt;;</div><div class="line"></div><div class="line">    Node* newList = copyLinkedList(tree, mymap);</div><div class="line"></div><div class="line">    copyRandom(tree, newList, mymap);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newList;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"></div><div class="line">    Node* node1 = <span class="keyword">new</span> Node(<span class="number">1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node* node2 = <span class="keyword">new</span> Node(<span class="number">2</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node* node3 = <span class="keyword">new</span> Node(<span class="number">3</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node* node4 = <span class="keyword">new</span> Node(<span class="number">4</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    node1-&gt;next = node2;</div><div class="line">    node2-&gt;next = node3;</div><div class="line">    node3-&gt;next = node4;</div><div class="line"></div><div class="line">    node1-&gt;random = node3;</div><div class="line">    node2-&gt;random = node4;</div><div class="line"></div><div class="line">    printInOrder(node1);</div><div class="line"></div><div class="line">    Node* clone = cloneList(node1);</div><div class="line"></div><div class="line">    printInOrder(clone);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、在原单链表上插入节点并删除实现深度拷贝"><a href="#3、在原单链表上插入节点并删除实现深度拷贝" class="headerlink" title="3、在原单链表上插入节点并删除实现深度拷贝"></a>3、在原单链表上插入节点并删除实现深度拷贝</h3><p>基本思想同2相似，通过减少查找节点的时间来提高效率。在原单链表中每个节点之后插入一个新节点，如下图所示：</p>
<p><img src="http://7xlnl2.com1.z0.glb.clouddn.com/post57-3.jpg" alt="图2"></p>
<p>当拷贝random指针时就可以通过以下代码实现。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A-&gt;next-&gt;random = A-&gt;random-&gt;next</div><div class="line"></div><div class="line"># 恢复原单链表</div><div class="line">A-&gt;next = A-&gt;next-&gt;next</div></pre></td></tr></table></figure>
<p><strong> 其实这也是一种特殊的节点映射关系 </strong>。故时间复杂度同2为O(2N)</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> key;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>, *<span class="title">random</span>;</span></div><div class="line">    Node(<span class="keyword">int</span> k, Node* nt, Node* rand): key(k), next(nt), random(rand) &#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 打印链表，[a, b] 表示 key 为 a 的节点 random 指针指向 key 为 b 的节点</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(Node* node)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"[ "</span> &lt;&lt; node-&gt;key &lt;&lt; <span class="string">" "</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node-&gt;random == <span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL ], "</span>;</div><div class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; node-&gt;random-&gt;key &lt;&lt; <span class="string">" ], "</span>;</div><div class="line"></div><div class="line">    printInorder(node-&gt;next);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 复制每个节点（不包含随机指针），并返回第一个复制的节点 </span></div><div class="line"><span class="function">Node* <span class="title">copyLinkedListNode</span><span class="params">(Node* treeNode)</span> </span>&#123;</div><div class="line">    Node* curNode = treeNode;</div><div class="line">    <span class="keyword">while</span>(curNode != <span class="literal">NULL</span>) &#123;</div><div class="line">        Node* next = curNode-&gt;next;</div><div class="line">        curNode-&gt;next = <span class="keyword">new</span> Node(curNode-&gt;key, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">        curNode-&gt;next-&gt;next = next;</div><div class="line">        curNode = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> treeNode-&gt;next;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 复制随机指针</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyRandomNode</span><span class="params">(Node* treeNode, Node* cloneNode)</span> </span>&#123;</div><div class="line">    Node *headNode = cloneNode;</div><div class="line">    <span class="keyword">while</span>(treeNode != <span class="literal">NULL</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(treeNode-&gt;random != <span class="literal">NULL</span>)</div><div class="line">            cloneNode-&gt;random = treeNode-&gt;random-&gt;next;</div><div class="line">        <span class="keyword">else</span> cloneNode-&gt;random = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(treeNode-&gt;next == <span class="literal">NULL</span> || cloneNode-&gt;next == <span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            treeNode = treeNode-&gt;next-&gt;next;</div><div class="line">            cloneNode = cloneNode-&gt;next-&gt;next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    cloneNode = headNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 恢复原来的单链表，即分离两个单链表</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">restoreLinkedList</span><span class="params">(Node* treeNode, Node* cloneNode)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(treeNode != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(cloneNode-&gt;next != <span class="literal">NULL</span>) &#123;</div><div class="line">            Node* cloneNext = cloneNode-&gt;next-&gt;next;</div><div class="line">            treeNode-&gt;next = treeNode-&gt;next-&gt;next;</div><div class="line">            cloneNode-&gt;next = cloneNext;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            treeNode-&gt;next = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        treeNode = treeNode-&gt;next;</div><div class="line">        cloneNode = cloneNode-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 复制整个单链表</span></div><div class="line"><span class="function">Node* <span class="title">cloneLinkedList</span><span class="params">(Node* treeNode)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(treeNode == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    Node* cloneNode = copyLinkedListNode(treeNode);</div><div class="line">    copyRandomNode(treeNode, cloneNode);</div><div class="line">    restoreLinkedList(treeNode, cloneNode);</div><div class="line">    <span class="keyword">return</span> cloneNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    Node* node1 = <span class="keyword">new</span> Node(<span class="number">1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node* node2 = <span class="keyword">new</span> Node(<span class="number">2</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node* node3 = <span class="keyword">new</span> Node(<span class="number">3</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node* node4 = <span class="keyword">new</span> Node(<span class="number">4</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">    node1-&gt;next = node2;</div><div class="line">    node2-&gt;next = node3;</div><div class="line">    node3-&gt;next = node4;</div><div class="line">    node1-&gt;random = node3;</div><div class="line">    node2-&gt;random = node4;</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"traversal of original binary tree is: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    printInorder(node1);</div><div class="line"></div><div class="line">    Node *clone = cloneLinkedList(node1);</div><div class="line"></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\ntraversal of cloned binary tree is: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    printInorder(clone);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、包含随机指针的二叉树深度拷贝"><a href="#二、包含随机指针的二叉树深度拷贝" class="headerlink" title="二、包含随机指针的二叉树深度拷贝"></a>二、包含随机指针的二叉树深度拷贝</h3><p>同上，这里也有三种对应的方法。</p>
<h3 id="1、暴力复制（OTZ）"><a href="#1、暴力复制（OTZ）" class="headerlink" title="1、暴力复制（OTZ）"></a>1、暴力复制（OTZ）</h3><p>就是暴力。。。时间复杂度为O(N2)</p>
<h3 id="2、通过节点映射关系实现深度拷贝-1"><a href="#2、通过节点映射关系实现深度拷贝-1" class="headerlink" title="2、通过节点映射关系实现深度拷贝"></a>2、通过节点映射关系实现深度拷贝</h3><p>同单链表中节点建立映射关系一样，这里的时间复杂度同样为O(2N)。</p>
<p>具体代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> key;</div><div class="line">	Node *left, *right, *random;</div><div class="line">	Node(<span class="keyword">int</span> k, Node* l, Node* r, Node* rand) : key(k), left(l), right(r), random(rand) &#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 按中序遍历递归打印树</span></div><div class="line"><span class="comment">// 其中[a, b]表示节点a的key值与random指针所指节点的key值</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(Node* node)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(node == <span class="literal">NULL</span>) </div><div class="line">		<span class="keyword">return</span> ;</div><div class="line"></div><div class="line">	printInorder(node-&gt;left);</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"[ "</span> &lt;&lt; node-&gt;key &lt;&lt; <span class="string">" "</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(node-&gt;random == <span class="literal">NULL</span>) &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL ], "</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; node-&gt;random-&gt;key &lt;&lt; <span class="string">" ], "</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	printInorder(node-&gt;right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 拷贝以treeNode为根节点的整棵树并返回拷贝完成后新的根节点</span></div><div class="line"><span class="comment">// 拷贝过程中包含所有节点的左右孩子，但不包含节点的random指针</span></div><div class="line"><span class="function">Node* <span class="title">copyLeftRightNode</span><span class="params">(Node* treeNode, <span class="built_in">map</span>&lt;Node *, Node *&gt; *mymap)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(treeNode == <span class="literal">NULL</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Node* cloneNode = <span class="keyword">new</span> Node(treeNode-&gt;key, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">	<span class="comment">// 建立当前节点到克隆节点的映射</span></div><div class="line">	(*mymap)[treeNode] = cloneNode;</div><div class="line">	cloneNode-&gt;left = copyLeftRightNode(treeNode-&gt;left, mymap);</div><div class="line">	cloneNode-&gt;right = copyLeftRightNode(treeNode-&gt;right, mymap);</div><div class="line">	<span class="keyword">return</span> cloneNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 遍历并拷贝random指针</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyRandom</span><span class="params">(Node* treeNode, Node* cloneNode, <span class="built_in">map</span>&lt;Node*, Node*&gt; *mymap)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(cloneNode == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	cloneNode-&gt;random = (*mymap)[treeNode-&gt;random];</div><div class="line">	copyRandom(treeNode-&gt;left, cloneNode-&gt;left, mymap);</div><div class="line">	copyRandom(treeNode-&gt;right, cloneNode-&gt;right, mymap);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 克隆整棵树的函数主体</span></div><div class="line"><span class="function">Node* <span class="title">cloneTree</span><span class="params">(Node* tree)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(tree == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 创建节点到节点的映射</span></div><div class="line">	<span class="built_in">map</span>&lt;Node*, Node*&gt; *mymap = <span class="keyword">new</span> <span class="built_in">map</span>&lt;Node*, Node*&gt;;</div><div class="line"></div><div class="line">	<span class="comment">// 第一次遍历只拷贝树中每个节点的左右孩子</span></div><div class="line">	<span class="comment">// 也就是说暂时不拷贝random指针</span></div><div class="line">	Node* newTree = copyLeftRightNode(tree, mymap);</div><div class="line"></div><div class="line">	<span class="comment">// 第二次遍历拷贝random指针</span></div><div class="line">	copyRandom(tree, newTree, mymap);</div><div class="line">	<span class="keyword">return</span> newTree;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line"></div><div class="line">	Node *tree = <span class="keyword">new</span> Node(<span class="number">1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">	tree-&gt;left = <span class="keyword">new</span> Node(<span class="number">2</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">	tree-&gt;right = <span class="keyword">new</span> Node(<span class="number">3</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">	tree-&gt;left-&gt;left = <span class="keyword">new</span> Node(<span class="number">4</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">	tree-&gt;left-&gt;right = <span class="keyword">new</span> Node(<span class="number">5</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">	tree-&gt;random = tree-&gt;left-&gt;right;</div><div class="line">	tree-&gt;left-&gt;right-&gt;random = tree-&gt;right;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Inorder traversal of original binary tree is: "</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	printInorder(tree);</div><div class="line"></div><div class="line">	Node *clone = cloneTree(tree);</div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\nInorder traversal of cloned binary tree is: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	printInorder(clone);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、在原二叉树上插入新节点后再删除"><a href="#3、在原二叉树上插入新节点后再删除" class="headerlink" title="3、在原二叉树上插入新节点后再删除"></a>3、在原二叉树上插入新节点后再删除</h3><p>思想同单链表操作一样，但这里要注意节点间的相对关系，在创建新节点时要正确建立该节点与父节点原左右孩子的关系。具体如图示：</p>
<p><img src="http://7xlnl2.com1.z0.glb.clouddn.com/post57-1.jpg" alt="图3"></p>
<p>具体代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> key;</div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">left</span>, *<span class="title">right</span>, *<span class="title">random</span>;</span></div><div class="line">	Node(<span class="keyword">int</span> k, Node* l, Node* r, Node* rand): key(k), left(l), right(r), random(rand) &#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 层次遍历</span></div><div class="line"><span class="comment">// [a, b] 表示 key 为 a 的节点 random 指针指向 key 为 b 的节点</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInorder</span><span class="params">(Node* node)</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(node == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"[ "</span> &lt;&lt; node-&gt;key &lt;&lt; <span class="string">" "</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(node-&gt;random == <span class="literal">NULL</span>)</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL ], "</span>;</div><div class="line">	<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; node-&gt;random-&gt;key &lt;&lt; <span class="string">" ], "</span>;</div><div class="line"></div><div class="line">	printInorder(node-&gt;left);</div><div class="line">	printInorder(node-&gt;right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 复制每个节点及左右孩子（不包含随机指针），并返回复制后的节点 </span></div><div class="line"><span class="function">Node* <span class="title">copyLeftRightNode</span><span class="params">(Node* treeNode)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(treeNode == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 在根节点与左孩子之间插入一个新节点</span></div><div class="line">	Node* left = treeNode-&gt;left;</div><div class="line">	treeNode-&gt;left = <span class="keyword">new</span> Node(treeNode-&gt;key, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">	treeNode-&gt;left-&gt;left = left;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(left != <span class="literal">NULL</span>) &#123;</div><div class="line">		left-&gt;left = copyLeftRightNode(left);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 复制后的左节点右孩子指向其父节点右孩子复制后得到的节点</span></div><div class="line">	treeNode-&gt;left-&gt;right = copyLeftRightNode(treeNode-&gt;right);</div><div class="line">	<span class="keyword">return</span> treeNode-&gt;left;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 复制随机指针</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyRandomNode</span><span class="params">(Node* treeNode, Node* cloneNode)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(treeNode == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(treeNode-&gt;random != <span class="literal">NULL</span>)</div><div class="line">		cloneNode-&gt;random = treeNode-&gt;random-&gt;left;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		cloneNode-&gt;random = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(treeNode-&gt;left != <span class="literal">NULL</span> &amp;&amp; cloneNode-&gt;left != <span class="literal">NULL</span>)</div><div class="line">		copyRandomNode(treeNode-&gt;left-&gt;left, cloneNode-&gt;left-&gt;left);</div><div class="line">	copyRandomNode(treeNode-&gt;right, cloneNode-&gt;right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 恢复原来的二叉树，也即分离出新复制的二叉树</span></div><div class="line"><span class="comment">// 因为右孩子关系保持正确，因此只需更新左孩子关系</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">restoreTreeLeftNode</span><span class="params">(Node* treeNode, Node* cloneNode)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(treeNode == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> ;</div><div class="line">	<span class="keyword">if</span>(cloneNode-&gt;left != <span class="literal">NULL</span>) &#123;</div><div class="line">		Node* cloneLeft = cloneNode-&gt;left-&gt;left;</div><div class="line">		treeNode-&gt;left = treeNode-&gt;left-&gt;left;</div><div class="line">		cloneNode-&gt;left = cloneLeft;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		treeNode-&gt;left = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	restoreTreeLeftNode(treeNode-&gt;left, cloneNode-&gt;left);</div><div class="line">	restoreTreeLeftNode(treeNode-&gt;right, cloneNode-&gt;right);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 复制整棵二叉树</span></div><div class="line"><span class="function">Node* <span class="title">cloneTree</span><span class="params">(Node* treeNode)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(treeNode == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">	Node* cloneNode = copyLeftRightNode(treeNode);</div><div class="line">	copyRandomNode(treeNode, cloneNode);</div><div class="line">	restoreTreeLeftNode(treeNode, cloneNode);</div><div class="line">	<span class="keyword">return</span> cloneNode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">/*</span></div><div class="line">	Node* tree = new Node(1);</div><div class="line">	tree-&gt;left = new Node(2);</div><div class="line">	tree-&gt;right = new Node(3);</div><div class="line">	tree-&gt;left-&gt;left = new Node(4);</div><div class="line">	tree-&gt;left-&gt;right = new Node(5);</div><div class="line">	tree-&gt;random = tree-&gt;left-&gt;right;</div><div class="line">	tree-&gt;left-&gt;left-&gt;random = tree;</div><div class="line">	tree-&gt;left-&gt;right-&gt;random = tree-&gt;right;</div><div class="line">*/</div><div class="line">	Node *tree = <span class="keyword">new</span> Node(<span class="number">10</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node *n2 = <span class="keyword">new</span> Node(<span class="number">6</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node *n3 = <span class="keyword">new</span> Node(<span class="number">12</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node *n4 = <span class="keyword">new</span> Node(<span class="number">5</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node *n5 = <span class="keyword">new</span> Node(<span class="number">8</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node *n6 = <span class="keyword">new</span> Node(<span class="number">11</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node *n7 = <span class="keyword">new</span> Node(<span class="number">13</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node *n8 = <span class="keyword">new</span> Node(<span class="number">7</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    Node *n9 = <span class="keyword">new</span> Node(<span class="number">9</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    tree-&gt;left = n2;</div><div class="line">    tree-&gt;right = n3;</div><div class="line">    tree-&gt;random = n2;</div><div class="line">    n2-&gt;left = n4;</div><div class="line">    n2-&gt;right = n5;</div><div class="line">    n2-&gt;random = n8;</div><div class="line">    n3-&gt;left = n6;</div><div class="line">    n3-&gt;right = n7;</div><div class="line">    n3-&gt;random = n5;</div><div class="line">    n4-&gt;random = n9;</div><div class="line">    n5-&gt;left = n8;</div><div class="line">    n5-&gt;right = n9;</div><div class="line">    n5-&gt;random = tree;</div><div class="line">    n6-&gt;random = n9;</div><div class="line">    n9-&gt;random = n8;</div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"traversal of original binary tree is: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	printInorder(tree);</div><div class="line"></div><div class="line">	Node *clone = cloneTree(tree);</div><div class="line"></div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\ntraversal of cloned binary tree is: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	printInorder(clone);</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、包含随机指针的单链表的深度拷贝&quot;&gt;&lt;a href=&quot;#一、包含随机指针的单链表的深度拷贝&quot; class=&quot;headerlink&quot; title=&quot;一、包含随机指针的单链表的深度拷贝&quot;&gt;&lt;/a&gt;一、包含随机指针的单链表的深度拷贝&lt;/h3&gt;&lt;p&gt;最近遇到一道很有趣的
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="algorithm" scheme="http://blog.yinwoods.work/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>首尾指针法</title>
    <link href="http://blog.yinwoods.work/2016/10/16/%E9%A6%96%E5%B0%BE%E6%8C%87%E9%92%88%E6%B3%95/"/>
    <id>http://blog.yinwoods.work/2016/10/16/首尾指针法/</id>
    <published>2016-10-15T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>首尾指针法多应用于在已排序的数组中实现O(N)的查找。</p>
<p>例如：给定一个整数k，对于两个递增数组，找到(i, j)使得 a 中的 i 位置与 b 中的 j 位置满足 a[i] + b[j] = k。<br>对于这种问题，我们往往可以取 a 中的第i位及 b 中第j位，依次相加并根据相加结果与数值 k 的大小来决定i, j的移动方向。</p>
<p>具体代码如下：</p>
<pre><code>#!CPP
while (i &lt; a.size()) {
    while(a[i] + b[j] &gt; X &amp;&amp; j &gt; 0) j--;
    if (a[i] + b[j] == X) writeAnswer(i, j);
    i++;
}
</code></pre><p>问题变形：</p>
<p>1、对于无重复元素的数组 a，问存在多少种三个数相加，和为定值k的情况。</p>
<blockquote>
<p>解答：先对数组排序，外部循环遍历a，并在循环内部找a[p] + a[q] = k - a[i]的情况。其中 p,q 的寻找即利用首尾指针法。</p>
</blockquote>
<p>2、对于无重复元素的数组 a，问存在多少种两个数相减，和为定值k的情况。</p>
<blockquote>
<p>解答：先对数组排序，外部循环遍历a，判断a[i] + k是否在数组a中即可，判断可以利用set来实现log(N)的时间复杂度，因此该算法的时间复杂度为O(NlogN)。</p>
<p>解答： 更高效的方法是取i = 0, j = 1, 当 a[j] - a[i] &gt; k 时，++i；当a[j] - a[i] &lt; k时，++j;</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首尾指针法多应用于在已排序的数组中实现O(N)的查找。&lt;/p&gt;
&lt;p&gt;例如：给定一个整数k，对于两个递增数组，找到(i, j)使得 a 中的 i 位置与 b 中的 j 位置满足 a[i] + b[j] = k。&lt;br&gt;对于这种问题，我们往往可以取 a 中的第i位及 b 中第
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="algorithm" scheme="http://blog.yinwoods.work/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组(suffix Array)学习</title>
    <link href="http://blog.yinwoods.work/2016/10/16/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.yinwoods.work/2016/10/16/后缀数组学习/</id>
    <published>2016-10-15T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-后缀（Suffix）"><a href="#什么是-后缀（Suffix）" class="headerlink" title="什么是 后缀（Suffix）"></a>什么是 后缀（Suffix）</h3><p>S是一个长度为 N 的字符串，那么定义S的第 i 个后缀就是S的子串 <code>S[i...n-1]</code></p>
<h3 id="什么是-后缀数组（Suffix-Array）"><a href="#什么是-后缀数组（Suffix-Array）" class="headerlink" title="什么是 后缀数组（Suffix Array）"></a>什么是 后缀数组（Suffix Array）</h3><p>后缀数组作为一种数据结构，被广泛应用于数据压缩、生物信息学等领域。通俗地说后缀数组被应用于<code>任何处理字符串与字符串匹配的场合</code>。</p>
<p>后缀数组是各个排序后的后缀的起始位置组成的数组。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>当 S = abaab 时。</p>
<p>所有的后缀如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.</span> abaab</div><div class="line"><span class="number">1.</span> baab</div><div class="line"><span class="number">2.</span> aab</div><div class="line"><span class="number">3.</span> ab</div><div class="line"><span class="number">4.</span> b</div></pre></td></tr></table></figure>
<p>依据字符串的比较对后缀进行排序后得到：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">2.</span> aab</div><div class="line"><span class="number">3.</span> ab</div><div class="line"><span class="number">0.</span> abaab</div><div class="line"><span class="number">4.</span> b</div><div class="line"><span class="number">1.</span> baab</div></pre></td></tr></table></figure>
<p>因此字符串S的后缀数组为： <code>(2, 3, 0, 4, 1)</code></p>
<h3 id="后缀数组的构造"><a href="#后缀数组的构造" class="headerlink" title="后缀数组的构造"></a>后缀数组的构造</h3><h4 id="O-N2logN-构造法"><a href="#O-N2logN-构造法" class="headerlink" title="O(N2logN)  构造法"></a>O(N2logN)  构造法</h4><p>这是最朴素的构造方法效率，即获取所有后缀并使用O(NlogN)的排序算法如快排或者合并排序对这些后缀进行排序。而构造法的时间复杂度是O(N2logN)而不是O(NlogN)的原因是排序过程中两个后缀的比较复杂度为O(N)。下面我们将把比较的复杂度从O(N)降为O(logN)。</p>
<h4 id="O-N-log2-N-构造法"><a href="#O-N-log2-N-构造法" class="headerlink" title="O(N log2 N) 构造法"></a>O(N log2 N) 构造法</h4><p>比较的复杂度能够从O(N)降为O(logN)依赖于后缀的特性：这些后缀并不是随机的，而是同属于一个字符串的后缀，也就是说这些后缀有相同的公共部分可以供我们利用。</p>
<p>下面用示例说明。我们以所有后缀的首字母为基准排序，并对这些首字母赋予一个 rank 值代表他们之间的大小关系。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.</span> a|baab</div><div class="line"><span class="number">0.</span> a|ab</div><div class="line"><span class="number">0.</span> a|b</div><div class="line"><span class="number">1.</span> b|aab</div><div class="line"><span class="number">1.</span> b|</div></pre></td></tr></table></figure>
<p>如上，以 | 左侧字符串为比较基准，字符串前的数字表示 | 左侧字符串对应的 rank。由此，rank(a) = 0， rank(b) = 1。</p>
<p>我们取两个字符进行比较时，比较分两步。首先比较第一个字符，如果相等则继续比较第二个字符。</p>
<p>1、对于 abaab 和 baab，因为二者首字母 rank 值已知且不同，因此 abaab 排序在 baab 之前。</p>
<p>2、对于 abaab 和 aab，因为而这首字母 rank 值已知且相同，因此继续看第二个字符，两者的第二个字符不同且 rank 值已知，所以 aab 排在 abaab 之前。</p>
<p>通过上面两个步骤的解析可以发现，在比较所有后缀的第一个字符之后，我们就已经获得了整个字符串 S 的所有字符的 rank 值。（因为所有后缀的首字符组在一起恰好为字符串S，联想后缀的定义即S从i(0 &lt;= i &lt; len(s))到S的最后一个字符所组成的字符串集合）</p>
<p>对于没有第二个字符的字符串我们认为它的第二部分 rank 值为最小值，这里设其为-1。例如 b 只有一个字符，因此它的前两个字符 rank 对就为（1， -1）</p>
<p>现在我们尝试以两个字符作为比较基准，有：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.</span> aa|b</div><div class="line"><span class="number">1.</span> ab|aab</div><div class="line"><span class="number">1.</span> ab|</div><div class="line"><span class="number">2.</span> b|</div><div class="line"><span class="number">2.</span> ba|ab</div></pre></td></tr></table></figure>
<p>综上所述，对于字符串下次比较，我们选取4个字符，而4个字符的比较又可分为两部分：前两个字符和后两个字符。这又回到了上一步的过程。因此比较两个字符串时，我们只需比较前1、2、4、8、…、log(len(s))个字符。</p>
<p>下面是代码示例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bits/stdc++.h"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="comment">// suffixRank 保存每次遍历过程中每个字符串的Rank值 </span></div><div class="line"><span class="comment">// suffixRank[i][j] 代表第 i 次遍历，第 j 个后缀的 rank </span></div><div class="line"></div><div class="line"><span class="keyword">int</span> suffixRank[<span class="number">20</span>][<span class="keyword">int</span>(<span class="number">1E6</span>)];</div><div class="line"></div><div class="line"><span class="comment">// 示例： "abaab" </span></div><div class="line"><span class="comment">// 对应的后缀数组： (2, 3, 0, 4, 1) </span></div><div class="line"><span class="comment">// 创建一个保存每个后缀 rank 值序列的结构体。 </span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myTuple</span> &#123;</span>  </div><div class="line">    <span class="keyword">int</span> originalIndex;   <span class="comment">// 保存原始后缀首字母的序列号</span></div><div class="line">    <span class="keyword">int</span> firstHalf;       <span class="comment">// 保存后缀前半部分的 rank 值</span></div><div class="line">    <span class="keyword">int</span> secondHalf;      <span class="comment">// 保存后缀后半部分的 rank 值</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 后缀比较函数，时间复杂度O(1)</span></div><div class="line"><span class="comment">// 首先 a 的 firstHalf 是否与 b 的 firstHalf 相等</span></div><div class="line"><span class="comment">// 如果相等，则比较 secondHalf</span></div><div class="line"><span class="comment">// 否则比较结果取决于 firstHalf 的 rank 值大小</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(myTuple a, myTuple b)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span>(a.firstHalf == b.firstHalf) <span class="keyword">return</span> a.secondHalf &lt; b.secondHalf;  </div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.firstHalf &lt; b.firstHalf;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">// 输入字符串 S </span></div><div class="line">	<span class="comment">// 保存 S 的长度到 N 中</span></div><div class="line"></div><div class="line">    <span class="built_in">string</span> s; <span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">    <span class="keyword">int</span> N = s.size();</div><div class="line">	</div><div class="line">	<span class="comment">// 初始化 每个后缀的首字母 rank 值作为对应后缀的 rank 值 </span></div><div class="line">	<span class="comment">// 对于单字母 rank 值，以该子母与 a 差距作为 rank，因此 'a' = 0, 'b' = 1, 'c' = 2, ... ,'z' = 25</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</div><div class="line">        suffixRank[<span class="number">0</span>][i] = s[i] - <span class="string">'a'</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 创建每个后缀的 元组 数组</span></div><div class="line"></div><div class="line">    myTuple L[N];</div><div class="line">	</div><div class="line">	<span class="comment">// 遍历 log(n) 次，直到所有的后缀排序完毕</span></div><div class="line">	<span class="comment">// 'stp' 保存当前遍历次数</span></div><div class="line">	<span class="comment">// 'cnt' 保存将被比较的后缀长度 </span></div><div class="line"></div><div class="line">	<span class="comment">// 每次遍历， 我们用上一次遍历获得的值初始化每个后缀数组的元组</span></div><div class="line">	</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">1</span>, stp = <span class="number">1</span>; cnt &lt; N; cnt *= <span class="number">2</span>, ++stp) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">            L[i].firstHalf = suffixRank[stp - <span class="number">1</span>][i];</div><div class="line">            L[i].secondHalf = i + cnt &lt; N ? suffixRank[stp - <span class="number">1</span>][i + cnt] : <span class="number">-1</span>;</div><div class="line">            L[i].originalIndex = i;</div><div class="line">        &#125;</div><div class="line">		</div><div class="line">		<span class="comment">// 以 元组 为基准对 元组数组 排序</span></div><div class="line"></div><div class="line">        sort(L, L + N, cmp);</div><div class="line">		</div><div class="line">		<span class="comment">// 排序后，另排序最靠前的 rank 值初始化为0 </span></div><div class="line">        <span class="comment">// Initialize rank for rank 0 suffix after sorting to its original index</span></div><div class="line">        <span class="comment">// in suffixRank array</span></div><div class="line"></div><div class="line">        suffixRank[stp][L[<span class="number">0</span>].originalIndex] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, currRank = <span class="number">0</span>; i &lt; N; ++i) &#123;</div><div class="line">			</div><div class="line">			<span class="comment">// 比较第 i 个后缀和第 i-1 个后缀</span></div><div class="line">			<span class="comment">// 如果二者相等，则将第 i-1 个后缀的 rank 值赋给第 i 个后缀</span></div><div class="line">			<span class="comment">// 否则第 i 个后缀的 rank 为第 i-1 个后缀的 rank 值加1 </span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(L[i - <span class="number">1</span>].firstHalf != L[i].firstHalf || L[i - <span class="number">1</span>].secondHalf != L[i].secondHalf)</div><div class="line">                ++currRank;</div><div class="line"></div><div class="line">            suffixRank[stp][L[i].originalIndex] = currRank;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 输出后缀数组 </span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) <span class="built_in">cout</span> &lt;&lt; L[i].originalIndex &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="后缀数组的应用"><a href="#后缀数组的应用" class="headerlink" title="后缀数组的应用"></a>后缀数组的应用</h3><p>1、结合LCP（Longest Common Prefix）</p>
<p>2、模式匹配</p>
<p>3、 查找最长重复子串</p>
<p>4、 查找最长公共子串</p>
<p>5、 查找最长回文子串</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>1、<a href="https://www.hackerrank.com/challenges/string-function-calculation/topics/two-pointer-technique" target="_blank" rel="external">String Function Calculation Topics</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是-后缀（Suffix）&quot;&gt;&lt;a href=&quot;#什么是-后缀（Suffix）&quot; class=&quot;headerlink&quot; title=&quot;什么是 后缀（Suffix）&quot;&gt;&lt;/a&gt;什么是 后缀（Suffix）&lt;/h3&gt;&lt;p&gt;S是一个长度为 N 的字符串，那么定义S的第
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="algorithm, data structure" scheme="http://blog.yinwoods.work/tags/algorithm-data-structure/"/>
    
  </entry>
  
  <entry>
    <title>实习总结</title>
    <link href="http://blog.yinwoods.work/2016/09/26/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.yinwoods.work/2016/09/26/实习总结/</id>
    <published>2016-09-25T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>从2015年1月底到2016年8月底在某二手车服务平台公司北京研发部实习了也算有半年的时间（去除中间回校答辩的一个月），从刚进入团队时的四五个人到离开时的20+人队伍，也算是从一个实习生角度见证了一个公司的成长过程。</p>
<h3 id="实习之初："><a href="#实习之初：" class="headerlink" title="实习之初："></a>实习之初：</h3><p>接手的工作是尽可能多地匹配两个车型库中的车型，提高车型匹配率。说实话这个工作我做地很痛苦，因为用C++写的，本身开发速度就比较慢，而且刚进入团队一方面是想展现出自己的实力；另一方面团队领导也对我不够信任，给我的感觉就是他们认为我在偷懒，而事实是我投入了大量的时间在其中。写完了一版之后就会发现有各种case要单独处理，当然出现这种问题很大的原因是我在动手写项目之前没有认真考虑过整个项目的结构以及各种可能会面对的case，这应该归因于我的经验问题，而不是能力问题。面对这种情况，这个时候摆在面前的选择有：</p>
<p>1、在程序中加各种判断语句针对处理；</p>
<p>2、代码重构；</p>
<p>就我个人而言我更倾向于代码重构，因为能够重新理清思路，避免后续出现的很多坑。但是由于业务需要，boss们更倾向于我快些交付，因此就只能像打补丁一样往原代码里面加各种处理，导致最后整个代码改起来特别吃力，每天花费大把的时间投入其中而取得的效果却微乎其微。而且boss的想法总是想一出是一出，需求来回变换而我又不能重构代码。那段时间自己也很痛苦，后来向boss明确表示自己不想再做这方面的工作了。幸好boss也表示理解，并且这项工作也证明了很难走得通（ <strong> 原因：两个车型库的车型命名差异太大，很难提取共通之处。 </strong> ）</p>
<h3 id="实习之中："><a href="#实习之中：" class="headerlink" title="实习之中："></a>实习之中：</h3><p>因为车型匹配这条路走不通加上我明确表示这项工作让我觉得很痛苦，因此boss给我分配的新任务是爬虫，爬取各大车上网站的数据（主要是每款车的配置价格等数据）。在这之前我学习过一段时间的python，算是入门，其中也涉及到了基础的爬虫抓取，懂得urllib以及beautifulsoup的使用。刚刚接手这个工作还是很惶恐的，好在boss表示交给我的任务是尝试性的，能够爬取更好，不能爬取的话再想别的方法。也正是从这里开始了我边学习边写爬虫的实习之路。</p>
<p>起初刚接手的是<a href="http://www.carking001.com/" target="_blank" rel="external">车王网</a>,记得好像没有什么防爬措施，因此大概花了一周的时间顺利地完成了爬取工作，boss也对我完成的工作比较满意，后面就给我布置了爬取<a href="http://www.che300.com/" target="_blank" rel="external">车300</a>的工作。说到这里就要提到一件比较有趣的事了，因为要求我写的爬虫只需要把相应网站的车型库整体爬下来一次，而不是动态更新，因此写得比较简单，并不涉及并行操作，而每个车型都对应一个唯一的id，所以完全可以启动多个python爬虫脚本，每个脚本爬取一个id范围内的车型信息，这样也算是从某种角度上实现了并行爬取。刚好boss当时对车300数据要的比较急，就让我同时启动10个脚本一起爬，这样一来速度上确实快了很多。但是因为单位时间内大量访问，ip被封了。。。也就是从这里开始学习了各种反-反爬虫的技术。后面又爬了<a href="http://www.dpac.gov.cn/" target="_blank" rel="external">国家质检总局产品缺陷管理中心</a>，新旧页面结构变化很大，且老数据展示及其不规范！不过花了写时间总算是比较像样地实现了。</p>
<p>这段时间公司各项业务也开始起步，招聘了很多新人，并购置了很多服务器。作为一个实习生，运营维护也就成了我工作中的一部分，实现一些定时脚本等等。这里不得不吐槽一下：为什么好多计算机从业人员连装系统都不会啊。。。</p>
<p>期间也在实习中完成了自己的毕业设计，回校答辩。（爬虫跑起来抓取数据的时候我就有时间动手写自己的毕设了，这也算是写爬虫的一个福利吧！）</p>
<h3 id="实习之尾"><a href="#实习之尾" class="headerlink" title="实习之尾"></a>实习之尾</h3><p>本来预计回校一周完成答辩工作的，没想到我们院硬生生地拖了大半个月才开始答辩工作 #_#!。可能是经过前面这段时间的高强度实习，很多知识都没有时间消化，回校这段休闲的时间反而感觉领会了很多东西。期间也帮同学的一个姐姐编写了一个校内抢先预定实验设备的脚本，功能倒是实现了，可以因为用的是 <a href="http://www.seleniumhq.org/" target="_blank" rel="external">selenium</a> + <a href="http://phantomjs.org/" target="_blank" rel="external">phantomjs</a>导致最后速度上还没有人工操作快。。。也算是胎死腹中了吧。</p>
<p>答辩完成后和朋友们一起去云南玩了一周，又回到公司实习，继续做爬虫相关工作。实现了一个定时抓取<a href="">汽车之家</a>的动态增量爬虫，并部署到了公司的服务器上，每个月初定时爬取。</p>
<h3 id="实习总结"><a href="#实习总结" class="headerlink" title="实习总结"></a>实习总结</h3><p>实习过程中自己确实学到了很多，看到了一些优秀程序员的追求已经不再是多少多少钱，而是在愉快地工作中实现自己的价值。让我了解到了优秀的程序员是怎么看待问题以及处理问题的。在获取酬劳的同时也学到了很多知识以及技术，以及一些与hr、boss交流的注意事项。相信对以后从事工作应该也有所帮助。</p>
<p>自己也认真地思考了一下去初创公司的一些长处和缺点，仅供大家参考：</p>
<p>长处：</p>
<p>1、能够和大牛们一起并肩战斗，开拓眼界；</p>
<p>2、团队工作强度大，锻炼多，成长速度快；</p>
<p>3、一人多用，要做各方面的工作；（或许算是缺点-&gt;_-&gt;）</p>
<p>4、和领导接触机会多，能够看到领导是怎么看待问题，怎么处理纠纷的；</p>
<p>5、人际关系简单，同事相处起来没有太多约束；</p>
<p>缺点：</p>
<p>1、缺乏有效的团队管理，开发进度很大程度上靠自我约束以及上级督促；</p>
<p>2、需求来回变换，往往想一出是一出，没有系统地构架；</p>
<p>3、开发工具、语言没有统一要求，整体比较混乱；</p>
<p>回想起实习的那段时间，虽然比较辛苦，但整体还是感觉很快乐，自己也确实成长了许多。感谢实习公司给予我的实习机会以及同事们给予我的指导和帮助！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从2015年1月底到2016年8月底在某二手车服务平台公司北京研发部实习了也算有半年的时间（去除中间回校答辩的一个月），从刚进入团队时的四五个人到离开时的20+人队伍，也算是从一个实习生角度见证了一个公司的成长过程。&lt;/p&gt;
&lt;h3 id=&quot;实习之初：&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="diary" scheme="http://blog.yinwoods.work/categories/diary/"/>
    
    
      <category term="thoughts" scheme="http://blog.yinwoods.work/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>python中的context manager</title>
    <link href="http://blog.yinwoods.work/2016/08/08/python%E4%B8%AD%E7%9A%84context-manager/"/>
    <id>http://blog.yinwoods.work/2016/08/08/python中的context-manager/</id>
    <published>2016-08-07T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在读python进阶类书籍《Intermediate Python》，看到后面有一章讲到<code>context manager</code>，讲的很浅，我也没看懂。于是自己抽时间搜集了网上的一些资料，整理如下：</p>
<p>python中的<code>context manager</code>也叫做上下文管理器，主要功能是确保代码块始终能够得到正确的‘善后’处理。有点像java中的<code>try     ... catch     ... finally     ...</code></p>
<p>对于打开文件读写，我们都知道下面的实现方式更好：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'file'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">    	print(line)</div></pre></td></tr></table></figure>
<p>但这种方式为什么更好呢？原因在于使用<code>with</code>可以执行<code>context manager</code>的相应函数，确保被打开的文件始终能够被关闭。如果我们自己手动<code>open()</code>、<code>close()</code>则可能会因为中间代码产生的异常导致<code>close()</code>无法执行。因此使用<code>with</code>可以让代码既简洁又有效。</p>
<p>下面接着说一说<code>context manager</code>的功能与用法。</p>
<h3 id="管理资源"><a href="#管理资源" class="headerlink" title="管理资源"></a>管理资源</h3><p><code>context manager</code>最常被用于管理资源，事实上，这也是很多时候我们使用它的原因。</p>
<p>当我们打开一个文件时，程序会占有对应的资源（文件描述符），而资源的管理则由操作系统来完成，也就是说同一时间能够打开的文件或进程是有限的。</p>
<p>例如，运行下面这份代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">files = []</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">    files.append(open(<span class="string">'foo.txt'</span>, <span class="string">'w'</span>))</div></pre></td></tr></table></figure>
<p>在mac os或linux上运行这份代码很有可能会产生OSError而导致中断，而在windows上运行程序则可能导致系统直接卡死。</p>
<p>那么问题的原因是什么呢？</p>
<p>答：是<em>内存泄露！</em> 这里的泄露原因是指打开文件后但未关闭。</p>
<p>为了避免对文件操作时产生上述的错误，有两种解决方法：</p>
<blockquote>
<p>1、避免同时打开超过操作系统上限个数个文件；</p>
<p>2、每次打开文件后关闭文件；</p>
</blockquote>
<p>毫无疑问，这里2的操作更好，因为能够更好地实现高层抽象并解决内存泄露问题。</p>
<p>先说1：在unix上<code>ulimit -n</code>可以查看同时打开文件描述符上限，在写代码时确保同时打开的文件数不超过上限值即可。但是这里并没有解决根本问题：内存泄露！</p>
<p>再说2：我们当然可以为上面的代码添加close()函数，可是如果打开文件或者对文件内容处理时产生异常，那么后面的<code>close()</code>就无法被执行，从而导致内存泄露。</p>
<p><code>context manager</code>正是用于处理这种情况的一个接口：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> something_that_returns_a_context_manager() <span class="keyword">as</span> my_resource:</div><div class="line">    do_something(my_resource)</div><div class="line">    ...</div><div class="line">    print(<span class="string">'done using my_resource'</span>)</div></pre></td></tr></table></figure>
<p>使用<code>with</code>，我们可以操作任何一个返回上下文管理器的函数（例如内置函数<code>open()</code>）；<code>with</code>能够保证当相应代码块内的代码执行完毕时，始终调用一个包含清理资源的‘善后’函数。这个‘善后’函数就定义在<code>context manager</code>中。</p>
<p>实现一个最简单的context manager只要求包含<code>__enter__()</code>函数以及<code>__exit__()</code>。</p>
<blockquote>
<p><code>__enter__()</code>执行操作并返回被管理的资源；</p>
<p><code>__exit__()</code>则清理资源，无返回。</p>
</blockquote>
<p>例如我们通过以下代码创建一个自己的<code>context manager</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename, mode)</span>:</span></div><div class="line">        self.filename = filename</div><div class="line">        self.mode = mode</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        self.open_file = open(self.filename, self.mode)</div><div class="line">        <span class="keyword">return</span> self.open_file</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self)</span>:</span></div><div class="line">        self.open_file.close()</div><div class="line">        </div><div class="line">files = []</div><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">    <span class="keyword">with</span> File(<span class="string">'foo.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        files.append(f.write(<span class="string">'foo'</span>))</div></pre></td></tr></table></figure>
<p>这里<code>__enter__()</code>打开文件，并返回；<code>__exit__()</code>则关闭文件。</p>
<h3 id="其他有用的资源管理器"><a href="#其他有用的资源管理器" class="headerlink" title="其他有用的资源管理器"></a>其他有用的资源管理器</h3><p>很多库中也包含资源管理器，例如<code>zipfile.ZipFile</code>、<code>subprocess.Popen</code>、<code>tarfile.TarFile</code>、<code>telnet.Telnet</code>、<code>pathlib.Path</code>等。其实，在使用完资源之后调用<code>close()</code>方法的都是<code>context manager</code>。</p>
<h3 id="关于contextlib"><a href="#关于contextlib" class="headerlink" title="关于contextlib"></a>关于<code>contextlib</code></h3><p><code>contextlib</code>模块包含了许多创建、使用<code>context manager</code>的工具。</p>
<p>例如使用<code>@contextmanager</code>装饰器来创建一个<code>context manager</code>。具体的创建方法是使用<code>@contextmanager</code>来装饰只包含一个<code>yield</code>语句的<code>generator</code>函数。在<code>yield</code>之前的部分都被视为<code>__enter__()</code>函数内容，而之后的部分则是<code>__exit__()</code>函数内容。下面让我们用这种方法来重写<code>File()</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</div><div class="line"></div><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_file</span><span class="params">(path, mode)</span>:</span></div><div class="line">    the_file = open(path, mode)</div><div class="line">    <span class="keyword">yield</span> the_file</div><div class="line">    the_file.close()</div><div class="line">    </div><div class="line">files = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100000</span>):</div><div class="line">    <span class="keyword">with</span> open_file(<span class="string">'foo.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        files.append(f)</div></pre></td></tr></table></figure>
<p>对比后可以发现使用这种方法的代码更加简洁。</p>
<p>另外有一个很简单的例子可以帮助你理解<code>@contextmanager</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</div><div class="line"></div><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(name)</span>:</span></div><div class="line">    print(<span class="string">"&lt;%s&gt;"</span> % name)</div><div class="line">    <span class="keyword">yield</span></div><div class="line">    print(<span class="string">"&lt;/%s&gt;"</span> % name)</div><div class="line">    </div><div class="line"><span class="keyword">with</span> tag(<span class="string">"h1"</span>):</div><div class="line">    print(<span class="string">"hello, world!"</span>)</div></pre></td></tr></table></figure>
<p>输出：<code>&lt;h1&gt;hello, world!&lt;/h1&gt;</code></p>
<p>另外也可以通过<code>contextlib.ContextDecorator</code>来实现自己的<code>context manager</code>装饰器。例如接着使用上面的例子来说明：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> ContextDecorator</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">makeparagraph</span><span class="params">(ContextDecorator)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'&lt;p&gt;'</span>)</div><div class="line">        <span class="keyword">return</span> self</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, *exc)</span>:</span></div><div class="line">        print(<span class="string">'&lt;/p&gt;'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        </div><div class="line"><span class="meta">@makeparagraph</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">emit_html</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'Here is some non-HTML'</span>)</div></pre></td></tr></table></figure>
<p>执行<code>emit_html()</code><br>会输出<code>&lt;p&gt;Here is some non-HTML&lt;/p&gt;</code></p>
<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><blockquote>
<ul>
<li><p><a href="https://www.python.org/dev/peps/pep-0343/" target="_blank" rel="external">PEP 34</a></p>
</li>
<li><p><a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" target="_blank" rel="external">Python with Context Managers</a></p>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在读python进阶类书籍《Intermediate Python》，看到后面有一章讲到&lt;code&gt;context manager&lt;/code&gt;，讲的很浅，我也没看懂。于是自己抽时间搜集了网上的一些资料，整理如下：&lt;/p&gt;
&lt;p&gt;python中的&lt;code&gt;contex
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="python" scheme="http://blog.yinwoods.work/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫requests登录解决422错误</title>
    <link href="http://blog.yinwoods.work/2016/07/27/python%E7%88%AC%E8%99%ABrequests%E7%99%BB%E5%BD%95%E8%A7%A3%E5%86%B3422%E9%94%99%E8%AF%AF/"/>
    <id>http://blog.yinwoods.work/2016/07/27/python爬虫requests登录解决422错误/</id>
    <published>2016-07-26T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>小伙伴<a href="http://blog.csdn.net/cumtcyf" target="_blank" rel="external">崔崔</a>今天要爬取<a href="http://ucar.act.buaa.edu.cn/users/sign_in" target="_blank" rel="external">北航ACT实验室的车联网</a>的信息，已有账号密码。模拟登录使用的是python的requests.session().post(),通过chrome的network观察post的表单数据，发现有一个<code>authenticity_token</code>，这个数据是每次刷网页动态生成的，存放在页面header的meta标签中，问题不大，直接用beautifulsoup获取就可以了。</p>
<p>问题出现在post之后，总是得到HTTP 422错误。通过查询了解到这里的422错误是指验证错误，可是token是即时获取的，其他信息也是完全按照表单要求填写，并且对提交数据进行了urlencode并使用<code>gbk</code>encode，实在是想不通原因。然后通过神奇的谷歌居然搜到了相同问题的博客。。。连代码都写得和我的惊人的相似。。。我都开始怀疑是不是和我爬的同一个网站了。。。</p>
<p>正确的爬取姿势是带着cookie验证，我猜这里的<code>authenticity_token</code>与cookie是相关联的，因为爬取时没带上cookie，所以无法验证成功。如果想要带上cookie只需使用<code>requests.Session()</code>来post即可。</p>
<p><a href="http://docs.python-requests.org/zh_CN/latest/user/advanced.html#advanced" target="_blank" rel="external">requests.Session()简介</a></p>
<p>简单介绍一下：</p>
<p>Session作为一个会话对象，会在同一个Session实例发出所有请求之间保存cookie。其实这里可以类比一下：当你登录淘宝后，短时间内访问淘宝的其他页面，不需要重新登录。</p>
<p>完整的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#author : yinwoods</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    url = <span class="string">'http://ucar.act.buaa.edu.cn/users/sign_in'</span></div><div class="line"></div><div class="line"></div><div class="line">    headers = &#123;</div><div class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</div><div class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip,deflate'</span>,</div><div class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</div><div class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">        <span class="string">'Host'</span>: <span class="string">'ucar.act.buaa.edu.cn'</span>,</div><div class="line">        <span class="string">'Origin'</span>: <span class="string">'http://ucar.act.buaa.edu.cn'</span>,</div><div class="line">        <span class="string">'Referer'</span>: <span class="string">'http://ucar.act.buaa.edu.cn/stat'</span>,</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0(X11;Linux x86_64) AppleWebKit/537.36(KHTML, like Gecko) Ubuntu Chromium/51.0.2704.79 Chrome/51.0.2704.79 Safari / 537.36'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">#先获取页面源码，提取token</span></div><div class="line">    session = requests.Session()</div><div class="line">    html = session.get(url, headers=headers).text</div><div class="line"></div><div class="line">    htmlDoc = BeautifulSoup(html, <span class="string">'html.parser'</span>)</div><div class="line">    token = htmlDoc.find_all(<span class="string">'meta'</span>)[<span class="number">-1</span>][<span class="string">'content'</span>]</div><div class="line"></div><div class="line">    print(token)</div><div class="line"></div><div class="line">    datas = urllib.parse.urlencode(&#123;</div><div class="line">        <span class="string">'utf8'</span>: <span class="string">'✓'</span>,</div><div class="line">        <span class="string">'authenticity_token'</span>: token,</div><div class="line">        <span class="string">'user[username]'</span>: username,</div><div class="line">        <span class="string">'user[password]'</span>: password,</div><div class="line">        <span class="string">'user[remember_me]'</span>: <span class="string">'1'</span>,</div><div class="line">        <span class="string">'commit'</span>: <span class="string">'登录'</span></div><div class="line">    &#125;).encode(<span class="string">'gbk'</span>)</div><div class="line"></div><div class="line">    requests.session().post()</div><div class="line"></div><div class="line">    print(datas)</div><div class="line"></div><div class="line">    print(session.post(url=url, params=datas, headers=headers))</div><div class="line"></div><div class="line">    res = session.get(<span class="string">'http://ucar.act.buaa.edu.cn/users/sign_in'</span>).text</div><div class="line">    print(res)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>打印页面后可以发现登录成功，状态码返回200。事后反思，意识到<code>token+cookie</code>可能这是一种比较通用的验证机制，自己不了解一方面是因为经验不足，另一方面可能就是之前爬的网站大都比较简单（是属于开放类门户网站），能够爬取成功并不代表自己的能力很高。</p>
<p>不过话又说回来自己想学的东西太多了。。。目前在看CSAPP，后面有时间再学习《HTTP权威指南》。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小伙伴&lt;a href=&quot;http://blog.csdn.net/cumtcyf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;崔崔&lt;/a&gt;今天要爬取&lt;a href=&quot;http://ucar.act.buaa.edu.cn/users/sign_in&quot; t
    
    </summary>
    
      <category term="myshare" scheme="http://blog.yinwoods.work/categories/myshare/"/>
    
    
      <category term="python, 爬虫" scheme="http://blog.yinwoods.work/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>一点感想</title>
    <link href="http://blog.yinwoods.work/2016/07/21/%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/"/>
    <id>http://blog.yinwoods.work/2016/07/21/一点感想/</id>
    <published>2016-07-20T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>大学结束都快一个月了，期间也不是没想过写点什么，可又总觉得提笔忘字。其实大学四年对我来说不仅仅是四年的光阴，更多的是期间的经历给我带来的蜕变，如果说大学前我是个孩子，那大学后的我已经变成一名青年了。有时候也会问自己，这样的话少年的我又去了哪里了呢？</p>
<p>回想起四年的生活，脑海中的画面总是定格在那个夜晚上自习刚结束，独自一人走在回寝室路上的时刻，那个时候的自己是多么充实快乐啊。如果说四年来学会了什么以后能够在社会上安身立命的技能的话，我的答案不会是编程，而是独处。编程归根到底来说只是一项普通的技能，是大多数人通过合理训练能够习得的技能，而独处则不然，它很大程度上依赖于外界环境的“压迫”。可能因为自己性子里的因素吧，对待生活赐予的“压迫”，我接受地很好，以至于现在很多时候能够享受独处，而也正是由于独处时的思考，帮助我理清了自己未来对待生活的想法。可以说我对自己想要的生活以及想要变成的模样，在这个独处的过程中变得愈发清晰。</p>
<p>最近在读余秋雨的《行者无疆》，书中讲述了作者在欧洲旅游的一些观察和感悟，虽然才读了四分之一，可已然感概良多。也正是在读这本书的过程中，我又多次思考了自己憧憬向往的未来生活。记得初中学过论语的“一箪食，一瓢饮，在陋巷。人不堪其忧，回也不改其乐”，当初的自己怎么也不能理解在这种物质极度匮乏的情况下如何能乐呢？然而现在自己慢慢地能够理解了，开心快乐本就源自内心，一个人内心强大又何需用外界物质来换取内心的愉悦呢？之前思考总是走上一条弯路：安贫乐道是一种高尚的情怀。现在则不这么看了，安贫乐道值得钦佩，更值得赞扬的应该是即使大富大贵仍能够不改其乐。</p>
<p>由此也引出了我对未来生活的一点小思考，我清楚地认知到未来我的幸福快乐不在于我拿起了多少东西，财富？权利？荣誉？都不是！在于我能够放下多少东西，生命的前半段要扛起路上的包裹，而后半程也需要放下。我所追求的生活应当是熵减的，既然清楚地意识到自己的目标，那么通往目标的路上我只需要避开对我来说过于复杂的人和事就已经成功一大半了（事实上一直以来我也确实是这么做的）。</p>
<p>对于未来，我想和一群简单的朋友生活在一个简单的圈子里。而这里的简单很大程度上取决于自己的选择。😀</p>
<p>——写于2016年7月20日夜 大雨</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学结束都快一个月了，期间也不是没想过写点什么，可又总觉得提笔忘字。其实大学四年对我来说不仅仅是四年的光阴，更多的是期间的经历给我带来的蜕变，如果说大学前我是个孩子，那大学后的我已经变成一名青年了。有时候也会问自己，这样的话少年的我又去了哪里了呢？&lt;/p&gt;
&lt;p&gt;回想起四年
    
    </summary>
    
      <category term="diary" scheme="http://blog.yinwoods.work/categories/diary/"/>
    
    
      <category term="thoughts" scheme="http://blog.yinwoods.work/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>python中的协程</title>
    <link href="http://blog.yinwoods.work/2016/07/07/python%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
    <id>http://blog.yinwoods.work/2016/07/07/python中的协程/</id>
    <published>2016-07-06T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>要了解协程，首先要对子例程有所认知。</p>
<p>子例程可以类比于程序中的函数调用，调用过程是后入先出的栈式调用；</p>
<blockquote>
<p>协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的。 <a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E7%A8%8B" target="_blank" rel="external">协程-维基百科</a></p>
</blockquote>
<p>通过下面的伪代码可以更好地理解协程：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var q := new queue</div><div class="line"></div><div class="line">生产者协程</div><div class="line"></div><div class="line">   loop</div><div class="line">       <span class="keyword">while</span> q <span class="keyword">is</span> <span class="keyword">not</span> full</div><div class="line">           create some new items</div><div class="line">           add the items to q</div><div class="line">       <span class="keyword">yield</span> to consume</div><div class="line">消费者协程</div><div class="line"></div><div class="line">   loop</div><div class="line">       <span class="keyword">while</span> q <span class="keyword">is</span> <span class="keyword">not</span> empty</div><div class="line">           remove some items <span class="keyword">from</span> q</div><div class="line">           use the items</div><div class="line">       <span class="keyword">yield</span> to produce</div></pre></td></tr></table></figure>
<p>在python中由于 <em>全局解释器锁（GIL）</em> 的原因导致多线程难以发挥多核并行计算能力，因为GIL的原因，同一时刻只能有一个线程运行，更多情况下我们选用multiprocessing来实现多进程从而提高执行效率。而对于协程则更擅长处理I/O密集的程序。</p>
<p>具体到python中协程，是以yield为基础实现的。</p>
<h4 id="首先了解一下python中的yield"><a href="#首先了解一下python中的yield" class="headerlink" title="首先了解一下python中的yield:"></a>首先了解一下python中的yield:</h4><p>可以通过stackoverflow上的一个帖子来了解python中的<a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python" target="_blank" rel="external">yield用法</a>，简单地来说就是包含yield语句的函数被称为生成器函数，它与普通函数的区别就在于普通函数每次都要从函数入口处重新执行，而生成器函数仅第一次从入口处执行，之后都会从yield语句之后的地方开始执行。</p>
<p>这么看好像很复杂，下面我们通过一个例子来认识yield。</p>
<p>比如现在你想要写一个生成前n个斐波那契数，你可能很容易想到类似下面的这种写法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    a = <span class="number">0</span></div><div class="line">    b = <span class="number">1</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> index &lt; n:</div><div class="line">        index += <span class="number">1</span></div><div class="line">        a, b = b, a+b</div><div class="line">        res.append(a)</div><div class="line">    <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
<p>可是当n非常大时，上面这个程序把所有结果都保存在res中是很耗内存的，这时候就引出了yield。如果使用yield重写的话，函数是这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    a = <span class="number">0</span></div><div class="line">    b = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> index &lt; n:</div><div class="line">        index += <span class="number">1</span></div><div class="line">        a, b = b, a+b</div><div class="line">        <span class="keyword">yield</span> a</div><div class="line">        </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">20</span>):</div><div class="line">    print(i)</div></pre></td></tr></table></figure>
<p>这里的fib因为包含了yield语句所以是生成器函数，当运行fib函数时，每次只取当前运算到的数，可以理解为每次运行到yield语句时，fib函数暂停，当下一次运行时，又会从暂停的位置继续运行。</p>
<p>那么讲到这里，这和协程有什么关系呢？</p>
<p><strong>很容易想到如果能够从yield语句进入另一个函数并获取其返回值，不就是协程的实现吗？</strong></p>
<p>这里引入了send的用法，send的作用即是把另一个函数的返回值传递给当前函数（PS：这里说函数返回值是为了帮助理解，其实就是再次进入函数时能够获取外界传递进来的参数），示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">stupid_fib</span><span class="params">(n)</span>:</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    a = <span class="number">0</span></div><div class="line">    b = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> index &lt; n:</div><div class="line">        </div><div class="line">        index += <span class="number">1</span></div><div class="line">        a, b = b, a+b</div><div class="line">        <span class="comment">#sleep_cnt 获取外界send的值</span></div><div class="line">        sleep_cnt = <span class="keyword">yield</span> a</div><div class="line">        </div><div class="line">        print(<span class="string">'let me think &#123;&#125; secs'</span>.format(sleep_cnt))</div><div class="line">        time.sleep(sleep_cnt)</div><div class="line"></div><div class="line">sfib = stupid_fib(<span class="number">20</span>)</div><div class="line">fib_res = next(sfib)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    print(fib_res)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        fib_res = sfib.send(random.uniform(<span class="number">0</span>, <span class="number">0.5</span>))</div><div class="line">    <span class="keyword">except</span> StopIteration:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>目前为止，通过 yield 与 send 就实现了类似协程的机制。</p>
<p>要进一步了解协程可以深入地学习一下asyncio.coroutine和yield from以及python3.5中引入的新机制async和await。</p>
<p>另外本篇博文主要参考：<a href="http://blog.guoyb.com/2016/07/03/python-coroutine/" target="_blank" rel="external">Python协程：从yield/send到async/await</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要了解协程，首先要对子例程有所认知。&lt;/p&gt;
&lt;p&gt;子例程可以类比于程序中的函数调用，调用过程是后入先出的栈式调用；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="python, 网络" scheme="http://blog.yinwoods.work/tags/python-%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>python challenge前十三关答案</title>
    <link href="http://blog.yinwoods.work/2016/05/31/python-challenge%E5%89%8D%E5%8D%81%E4%B8%89%E5%85%B3%E7%AD%94%E6%A1%88/"/>
    <id>http://blog.yinwoods.work/2016/05/31/python-challenge前十三关答案/</id>
    <published>2016-05-30T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然间发现了一个很有趣的python练习网站<a href="http://www.pythonchallenge.com/" target="_blank" rel="external">Python Challenge</a>，具体每一关的玩法是根据提供的线索编程得到进入下一关的URL。游戏一共有33关，我玩了一下午，到第十三关发现逻辑性、趣味性已经弱了很多，也就不打算继续玩下去了，所以这里之给出前十三关答案。（PS：就个人来说，前面的一些关卡逻辑性比较强，自己多推理都可以解决，但后面真的是靠脑洞了，可能确实需要查看一些网上的提示才能过关。）</p>
<h3 id="第0关"><a href="#第0关" class="headerlink" title="第0关"></a>第0关</h3><p>线索：<code>网页中间显示一张图片，图片上是一个显示器，显示2的38次方；图片下方是提示：尝试修改URL地址。</code></p>
<p>因此想到，把url最后的0换为2的38次方。</p>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">id = <span class="number">2</span>**<span class="number">38</span></div><div class="line">url = <span class="string">'http://www.pythonchallenge.com/pc/def/'</span> + str(id) + <span class="string">'.html'</span></div><div class="line">print(url)</div><div class="line"></div><div class="line">req = requests.get(url)</div><div class="line">print(req.text)</div></pre></td></tr></table></figure>
<p>成功进入下一关<a href="http://www.pythonchallenge.com/pc/def/274877906944.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/274877906944.html</a>！</p>
<h3 id="第1关"><a href="#第1关" class="headerlink" title="第1关"></a>第1关</h3><p>线索：<code>图片是一个笔记本，给出K-&gt;M O-&gt;Q E-&gt;G；发现对应的字母ascii码相差2，图片下方给出一段紫色的完全不知道含义的英文。</code></p>
<p>可以想到，对下面的这段英文解密，解密的关键就是每个字母的ascii循环加2。</p>
<p>具体实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">str = <span class="string">"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. "</span> \</div><div class="line">      <span class="string">"bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. "</span> \</div><div class="line">      <span class="string">"sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj."</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> char <span class="keyword">in</span> str:</div><div class="line">    <span class="keyword">if</span> ord(char) &lt;= <span class="number">122</span> <span class="keyword">and</span> ord(char) &gt;= <span class="number">97</span>:</div><div class="line">        asc = ord(char) + <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> asc &gt; <span class="number">122</span>:</div><div class="line">            asc -= <span class="number">26</span></div><div class="line">        print(chr(asc), end=<span class="string">''</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(char, end=<span class="string">''</span>)</div><div class="line">print()</div></pre></td></tr></table></figure>
<p>运行后得到输出：<code>i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that&#39;s why this text is so long. using string.maketrans() is recommended. now apply on the url.</code></p>
<p>查了下str.maketrans()发现用这个替换更方便，因此直接用如下方法实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">str = <span class="string">"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. "</span> \</div><div class="line">      <span class="string">"bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. "</span> \</div><div class="line">      <span class="string">"sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj."</span></div><div class="line">print(str.translate(str.maketrans(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>, <span class="string">'cdefghijklmnopqrstuvwxyzab'</span>)))</div><div class="line"><span class="comment">#此时的url被重定向为map.html</span></div><div class="line">print(<span class="string">'map'</span>.translate(str.maketrans(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>, <span class="string">'cdefghijklmnopqrstuvwxyzab'</span>)))</div></pre></td></tr></table></figure>
<p>运行后得到下一关入口：<a href="http://www.pythonchallenge.com/pc/def/ocr.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/ocr.html</a></p>
<h3 id="第2关"><a href="#第2关" class="headerlink" title="第2关"></a>第2关</h3><p>线索：<code>文字提示识别字符，字符可能在书中也可能在其他地方。</code></p>
<p>因为我直接用得request获取网页源码，所以看到了一堆注释的乱七八糟的符号，要做的其实就是提取出这些符号中的字符。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">req = requests.get(<span class="string">'http://www.pythonchallenge.com/pc/def/ocr.html'</span>)</div><div class="line">left = req.text.rfind(<span class="string">'&lt;!--'</span>)</div><div class="line">right = req.text.rfind(<span class="string">'--&gt;'</span>)</div><div class="line"></div><div class="line">str = req.text[left+<span class="number">4</span>:right]</div><div class="line"><span class="keyword">for</span> chs <span class="keyword">in</span> str:</div><div class="line">    <span class="keyword">if</span> chs.isalpha():</div><div class="line">        print(chs, end=<span class="string">''</span>)</div></pre></td></tr></table></figure>
<p>运行后输出eequality， 因此得到下一关入口：<a href="http://www.pythonchallenge.com/pc/def/equality.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/equality.html</a></p>
<h3 id="第3关"><a href="#第3关" class="headerlink" title="第3关"></a>第3关</h3><p>线索：<code>提示：每边都有且仅有3个大保镖的小字符。（莫名萌感）</code></p>
<p>不得不说这里是个坑（也怪自己英语理解能力功力不够），我开始以为是找到九宫格中仅有中间一格内是小写字符的所有字符，结果找出了一堆乱七八糟的字符。囧</p>
<p>看了答案才知道，提示里的EXACTLY着重在“3个”，而不是“每条边”，所以真正的含义是找到所有的恰好左侧和右侧都只有3个大写字符的小写字符。</p>
<p>直到真实含义后自己又实现了下，后来发现用正则表达式一行就够了。。。看来自己的姿势还是不够多，不够pythonic。</p>
<p>具体实现如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">judgeItem</span><span class="params">(mat, i, j)</span>:</span></div><div class="line">    <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &lt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> i &gt;= len(mat) <span class="keyword">or</span> j &gt;= len(mat[i]):</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    char = mat[i][j]</div><div class="line">    <span class="keyword">if</span> char &gt;= <span class="string">'A'</span> <span class="keyword">and</span> char &lt;= <span class="string">'Z'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> char &gt;= <span class="string">'a'</span> <span class="keyword">and</span> char &lt;= <span class="string">'z'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(mat, i, j)</span>:</span></div><div class="line">    <span class="keyword">if</span> mat[i][j] &gt;= <span class="string">'a'</span> <span class="keyword">and</span> mat[i][j] &lt;= <span class="string">'z'</span>:</div><div class="line">        bodyGds = judgeItem(mat, i, j<span class="number">-3</span>) + judgeItem(mat, i, j<span class="number">-2</span>) + judgeItem(mat, i, j<span class="number">-1</span>)</div><div class="line">        bodyGds += judgeItem(mat, i, j+<span class="number">1</span>) + judgeItem(mat, i, j+<span class="number">2</span>) + judgeItem(mat, i, j+<span class="number">3</span>)</div><div class="line">        <span class="keyword">if</span> bodyGds == <span class="number">6</span> <span class="keyword">and</span> judgeItem(mat, i, j<span class="number">-4</span>) == <span class="number">0</span> <span class="keyword">and</span> judgeItem(mat, i, j+<span class="number">4</span>) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line">req = requests.get(<span class="string">'http://www.pythonchallenge.com/pc/def/equality.html'</span>)</div><div class="line">left = req.text.rfind(<span class="string">'&lt;!--'</span>)</div><div class="line">right = req.text.rfind(<span class="string">'--&gt;'</span>)</div><div class="line"></div><div class="line">str = req.text[left+<span class="number">4</span>:right]</div><div class="line"></div><div class="line">mat = []</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> str.split(<span class="string">'\n'</span>):</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line == <span class="string">''</span>:</div><div class="line">        mat.append(line)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(mat)):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(mat[i])):</div><div class="line">        <span class="keyword">if</span> judge(mat, i, j):</div><div class="line">            print(mat[i][j], end=<span class="string">''</span>)</div><div class="line"></div><div class="line"><span class="comment">#以上为我的实现方式。。。。</span></div><div class="line"><span class="comment">#简洁的方法</span></div><div class="line">print(<span class="string">''</span>.join(re.findall(<span class="string">"[^A-Z]+[A-Z]&#123;3&#125;([a-z])[A-Z]&#123;3&#125;[^A-Z]"</span>, str)))</div></pre></td></tr></table></figure>
<p>anyway，得到了下一关的入口：<a href="http://www.pythonchallenge.com/pc/def/linkedlist.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/linkedlist.html</a></p>
<h3 id="第4关"><a href="#第4关" class="headerlink" title="第4关"></a>第4关</h3><p>线索：<code>打开后显示linkedlist.php，因此手动转入，发现页面标题是follow the chain， 另外图片是一个链接</code></p>
<p>感觉好像没什么线索，因为我还是用request获取源码，所以看到了额外的信息…</p>
<p>‘’’<br><!-- urllib may help. DON'T TRY ALL NOTHINGS, since it will never 
end. 400 times is more than enough. --><br>‘’’</p>
<p>结合点击图片后进入的页面可以猜想这是一个超过400个节点的链，我们要做的其实就是用爬虫来走这个链，一直走到终点得到答案。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">baseUrl = <span class="string">'http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing='</span></div><div class="line">req = requests.get(<span class="string">'http://www.pythonchallenge.com/pc/def/linkedlist.php'</span>)</div><div class="line">res = re.findall(<span class="string">'(\d+)'</span>, req.text)</div><div class="line"></div><div class="line">req = requests.get(baseUrl + res[<span class="number">1</span>])</div><div class="line">print(baseUrl+res[<span class="number">1</span>], req.text)</div><div class="line">res = re.findall(<span class="string">'(\d+)'</span>, req.text)</div><div class="line"></div><div class="line"><span class="comment">#while True:</span></div><div class="line"><span class="comment">#    req = requests.get(baseUrl + res[0])</span></div><div class="line"><span class="comment">#    print(baseUrl+res[0], req.text)</span></div><div class="line"><span class="comment">#    res = re.findall('(\d+)', req.text)</span></div><div class="line"><span class="comment">#    if res == '':</span></div><div class="line"><span class="comment">#        break</span></div><div class="line"><span class="comment">#    print(res)</span></div><div class="line"></div><div class="line"><span class="comment">#运行之后中间会断一次，需要除以2之后再跑</span></div><div class="line"><span class="comment">#http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=16044 Yes. Divide by two and keep going.</span></div><div class="line"></div><div class="line"><span class="comment">#后期还会给出两个nothing的例子，这个加一个判断就好，如果出现两个就取第二个</span></div><div class="line"></div><div class="line">res.clear()</div><div class="line">res.append(str(<span class="number">16044</span>/<span class="number">2</span>))</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">if</span> len(res) == <span class="number">2</span>:</div><div class="line">        url = baseUrl + res[<span class="number">1</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        url = baseUrl + res[<span class="number">0</span>]</div><div class="line">    req = requests.get(url)</div><div class="line">    print(url, req.text)</div><div class="line">    res = re.findall(<span class="string">'(\d+)'</span>, req.text)</div><div class="line">    <span class="keyword">if</span> len(res) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>最终得到peak.html</p>
<p>因此得到下一关入口：<a href="http://www.pythonchallenge.com/pc/def/peak.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/peak.html</a></p>
<h3 id="第5关"><a href="#第5关" class="headerlink" title="第5关"></a>第5关</h3><p>这一关就是阅读理解了。。。</p>
<p>线索：<code>进入后发现有张图片，命名为peakhell.jpg，下面提示pronounce it，另外页面源码可以发现一个peakhell标签，指向banner.p链接，并提示peak hell听起来熟悉吗？</code></p>
<p>这道题我是没想出来，google之后发现是进入banner.p链接后，根据python的pickle模块来处理。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> pickle</div><div class="line"><span class="keyword">import</span>  requests</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line">req = requests.get(<span class="string">'http://www.pythonchallenge.com/pc/def/peak.html'</span>)</div><div class="line">print(req.text) <span class="comment">#得到banner.p</span></div><div class="line">req = urllib.request.urlopen(<span class="string">'http://www.pythonchallenge.com/pc/def/banner.p'</span>)</div><div class="line">req = pickle.loads(req.read())</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> req:</div><div class="line">    print(<span class="string">''</span>.join(elmt[<span class="number">0</span>] * elmt[<span class="number">1</span>] <span class="keyword">for</span> elmt <span class="keyword">in</span> line))</div></pre></td></tr></table></figure>
<p>得到下一关的入口：<a href="http://www.pythonchallenge.com/pc/def/channel.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/channel.html</a></p>
<h3 id="第6关"><a href="#第6关" class="headerlink" title="第6关"></a>第6关</h3><p>线索：<code>页面内可用信息极其少，下方的捐款信息毫无疑问不能算是线索，只有一个注释zip</code></p>
<p>根据zip可知这关可能需要解压模块zip，可是解压什么呢？尝试进入zip.html会得到一条信息：yes. find the zip。那么说明这个思路是对的，从而想到把channel.html换成channel.zip会下载到这个文件。解压后发现里面有个README文件，又是nothing…下面就是和第4关类似的操作了，不同的是第4关是网页，这次是文件。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> zipfile</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">req = requests.get(<span class="string">'http://www.pythonchallenge.com/pc/def/channel.html'</span>)</div><div class="line">print(req.text)<span class="comment">#http://www.pythonchallenge.com/pc/def/channel.zip 下载</span></div><div class="line">zpfile = zipfile.ZipFile(<span class="string">"channel.zip"</span>)</div><div class="line"></div><div class="line">id = <span class="number">90052</span><span class="comment">#源自README</span></div><div class="line">res = []</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        id = re.search(<span class="string">'(\d+)'</span>, str(zpfile.read(str(id) + <span class="string">'.txt'</span>))).group(<span class="number">1</span>)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(zpfile.read(str(id) + <span class="string">'.txt'</span>))</div><div class="line">        <span class="keyword">break</span></div><div class="line">    print(id)</div><div class="line">    res.append(zpfile.getinfo(str(id) + <span class="string">'.txt'</span>).comment.decode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">print(<span class="string">''</span>.join(res))<span class="comment">#HOCKEY</span></div><div class="line"></div><div class="line">req = requests.get(<span class="string">'http://www.pythonchallenge.com/pc/def/hockey.html'</span>)</div><div class="line"></div><div class="line"><span class="comment">#提示结果是空气的成分，观察HOCKEY的组成，发现是oxygen</span></div><div class="line">print(req.text)<span class="comment">#OXYGEY</span></div></pre></td></tr></table></figure>
<p>得到下一关的入口：<a href="http://www.pythonchallenge.com/pc/def/oxygen.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/oxygen.html</a></p>
<h3 id="第7关"><a href="#第7关" class="headerlink" title="第7关"></a>第7关</h3><p>线索：<code>页面仅有一张打码的图片</code></p>
<p>自己想不出来，在网上看到说是对图片的打码部分按ascii解码。。。不明觉厉。（PS：从这里开始，感觉逻辑性就弱了很多）</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> PIL.Image</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="comment">#req = requests.get('http://www.pythonchallenge.com/pc/def/oxygen.html')</span></div><div class="line"><span class="comment">#print(req.text)</span></div><div class="line">img = PIL.Image.open(urllib.request.urlopen(<span class="string">'http://www.pythonchallenge.com/pc/def/oxygen.png'</span>))</div><div class="line">row = [chr(img.getpixel((x, <span class="number">45</span>))[<span class="number">0</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">609</span>, <span class="number">7</span>)]</div><div class="line">print(<span class="string">''</span>.join(row))</div><div class="line">row = [chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">121</span>]]</div><div class="line">print(<span class="string">''</span>.join(row))</div></pre></td></tr></table></figure>
<p>得到单词integrity，从而得到下一关入口：<a href="http://www.pythonchallenge.com/pc/def/integrity.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/def/integrity.html</a></p>
<h3 id="第8关"><a href="#第8关" class="headerlink" title="第8关"></a>第8关</h3><p>线索：<code>进入后发现图片中的蜜蜂是一个链接，另外页面源码中包含un和pw两个字符串</code></p>
<p>点击链接后提示输入用户名、密码，结合un、pw可以猜想这二者对应username,password。</p>
<p>看答案知道是用bz2解密。。。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> bz2</div><div class="line"><span class="keyword">import</span> requests</div><div class="line">req = requests.get(<span class="string">'http://www.pythonchallenge.com/pc/def/integrity.html'</span>)</div><div class="line">print(req.text)</div><div class="line">print(bz2.decompress(<span class="string">b'BZh91AY&amp;SYA\xaf\x82\r\x00\x00\x01\x01\x80\x02\xc0\x02\x00 \x00!\x9ah3M\x07&lt;]\xc9\x14\xe1BA\x06\xbe\x084'</span>))</div><div class="line">print(bz2.decompress(<span class="string">b'BZh91AY&amp;SY\x94$|\x0e\x00\x00\x00\x81\x00\x03$ \x00!\x9ah3M\x13&lt;]\xc9\x14\xe1BBP\x91\xf08'</span>))</div></pre></td></tr></table></figure>
<p>得到用户名：huge 密码：file</p>
<p>点击链接输入后得到下一关入口：<a href="http://www.pythonchallenge.com/pc/return/good.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/return/good.html</a></p>
<h3 id="第9关"><a href="#第9关" class="headerlink" title="第9关"></a>第9关</h3><p>线索：<code>标题为connect the dots， 页面图片中也包含了很多黑点；另外源码中给出first second， 并问first + second = ?</code></p>
<p>结合first second中数值特点可以猜想是坐标集，下面索要做的就是分别把first和second中的坐标连接起来。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'good.jpg'</span>)</div><div class="line">draw = ImageDraw.Draw(img)</div><div class="line"></div><div class="line">first = [ <span class="number">146</span>,<span class="number">399</span>,<span class="number">163</span>,<span class="number">403</span>,<span class="number">170</span>,<span class="number">393</span>,<span class="number">169</span>,<span class="number">391</span>,<span class="number">166</span>,<span class="number">386</span>,<span class="number">170</span>,<span class="number">381</span>,<span class="number">170</span>,<span class="number">371</span>,<span class="number">170</span>,<span class="number">355</span>,<span class="number">169</span>,<span class="number">346</span>,<span class="number">167</span>,<span class="number">335</span>,<span class="number">170</span>,<span class="number">329</span>,<span class="number">170</span>,<span class="number">320</span>,<span class="number">170</span>,</div><div class="line"><span class="number">310</span>,<span class="number">171</span>,<span class="number">301</span>,<span class="number">173</span>,<span class="number">290</span>,<span class="number">178</span>,<span class="number">289</span>,<span class="number">182</span>,<span class="number">287</span>,<span class="number">188</span>,<span class="number">286</span>,<span class="number">190</span>,<span class="number">286</span>,<span class="number">192</span>,<span class="number">291</span>,<span class="number">194</span>,<span class="number">296</span>,<span class="number">195</span>,<span class="number">305</span>,<span class="number">194</span>,<span class="number">307</span>,<span class="number">191</span>,<span class="number">312</span>,<span class="number">190</span>,<span class="number">316</span>,</div><div class="line"><span class="number">190</span>,<span class="number">321</span>,<span class="number">192</span>,<span class="number">331</span>,<span class="number">193</span>,<span class="number">338</span>,<span class="number">196</span>,<span class="number">341</span>,<span class="number">197</span>,<span class="number">346</span>,<span class="number">199</span>,<span class="number">352</span>,<span class="number">198</span>,<span class="number">360</span>,<span class="number">197</span>,<span class="number">366</span>,<span class="number">197</span>,<span class="number">373</span>,<span class="number">196</span>,<span class="number">380</span>,<span class="number">197</span>,<span class="number">383</span>,<span class="number">196</span>,<span class="number">387</span>,<span class="number">192</span>,</div><div class="line"><span class="number">389</span>,<span class="number">191</span>,<span class="number">392</span>,<span class="number">190</span>,<span class="number">396</span>,<span class="number">189</span>,<span class="number">400</span>,<span class="number">194</span>,<span class="number">401</span>,<span class="number">201</span>,<span class="number">402</span>,<span class="number">208</span>,<span class="number">403</span>,<span class="number">213</span>,<span class="number">402</span>,<span class="number">216</span>,<span class="number">401</span>,<span class="number">219</span>,<span class="number">397</span>,<span class="number">219</span>,<span class="number">393</span>,<span class="number">216</span>,<span class="number">390</span>,<span class="number">215</span>,<span class="number">385</span>,</div><div class="line"><span class="number">215</span>,<span class="number">379</span>,<span class="number">213</span>,<span class="number">373</span>,<span class="number">213</span>,<span class="number">365</span>,<span class="number">212</span>,<span class="number">360</span>,<span class="number">210</span>,<span class="number">353</span>,<span class="number">210</span>,<span class="number">347</span>,<span class="number">212</span>,<span class="number">338</span>,<span class="number">213</span>,<span class="number">329</span>,<span class="number">214</span>,<span class="number">319</span>,<span class="number">215</span>,<span class="number">311</span>,<span class="number">215</span>,<span class="number">306</span>,<span class="number">216</span>,<span class="number">296</span>,<span class="number">218</span>,</div><div class="line"><span class="number">290</span>,<span class="number">221</span>,<span class="number">283</span>,<span class="number">225</span>,<span class="number">282</span>,<span class="number">233</span>,<span class="number">284</span>,<span class="number">238</span>,<span class="number">287</span>,<span class="number">243</span>,<span class="number">290</span>,<span class="number">250</span>,<span class="number">291</span>,<span class="number">255</span>,<span class="number">294</span>,<span class="number">261</span>,<span class="number">293</span>,<span class="number">265</span>,<span class="number">291</span>,<span class="number">271</span>,<span class="number">291</span>,<span class="number">273</span>,<span class="number">289</span>,<span class="number">278</span>,<span class="number">287</span>,</div><div class="line"><span class="number">279</span>,<span class="number">285</span>,<span class="number">281</span>,<span class="number">280</span>,<span class="number">284</span>,<span class="number">278</span>,<span class="number">284</span>,<span class="number">276</span>,<span class="number">287</span>,<span class="number">277</span>,<span class="number">289</span>,<span class="number">283</span>,<span class="number">291</span>,<span class="number">286</span>,<span class="number">294</span>,<span class="number">291</span>,<span class="number">296</span>,<span class="number">295</span>,<span class="number">299</span>,<span class="number">300</span>,<span class="number">301</span>,<span class="number">304</span>,<span class="number">304</span>,<span class="number">320</span>,<span class="number">305</span>,</div><div class="line"><span class="number">327</span>,<span class="number">306</span>,<span class="number">332</span>,<span class="number">307</span>,<span class="number">341</span>,<span class="number">306</span>,<span class="number">349</span>,<span class="number">303</span>,<span class="number">354</span>,<span class="number">301</span>,<span class="number">364</span>,<span class="number">301</span>,<span class="number">371</span>,<span class="number">297</span>,<span class="number">375</span>,<span class="number">292</span>,<span class="number">384</span>,<span class="number">291</span>,<span class="number">386</span>,<span class="number">302</span>,<span class="number">393</span>,<span class="number">324</span>,<span class="number">391</span>,<span class="number">333</span>,<span class="number">387</span>,</div><div class="line"><span class="number">328</span>,<span class="number">375</span>,<span class="number">329</span>,<span class="number">367</span>,<span class="number">329</span>,<span class="number">353</span>,<span class="number">330</span>,<span class="number">341</span>,<span class="number">331</span>,<span class="number">328</span>,<span class="number">336</span>,<span class="number">319</span>,<span class="number">338</span>,<span class="number">310</span>,<span class="number">341</span>,<span class="number">304</span>,<span class="number">341</span>,<span class="number">285</span>,<span class="number">341</span>,<span class="number">278</span>,<span class="number">343</span>,<span class="number">269</span>,<span class="number">344</span>,<span class="number">262</span>,<span class="number">346</span>,</div><div class="line"><span class="number">259</span>,<span class="number">346</span>,<span class="number">251</span>,<span class="number">349</span>,<span class="number">259</span>,<span class="number">349</span>,<span class="number">264</span>,<span class="number">349</span>,<span class="number">273</span>,<span class="number">349</span>,<span class="number">280</span>,<span class="number">349</span>,<span class="number">288</span>,<span class="number">349</span>,<span class="number">295</span>,<span class="number">349</span>,<span class="number">298</span>,<span class="number">354</span>,<span class="number">293</span>,<span class="number">356</span>,<span class="number">286</span>,<span class="number">354</span>,<span class="number">279</span>,<span class="number">352</span>,<span class="number">268</span>,</div><div class="line"><span class="number">352</span>,<span class="number">257</span>,<span class="number">351</span>,<span class="number">249</span>,<span class="number">350</span>,<span class="number">234</span>,<span class="number">351</span>,<span class="number">211</span>,<span class="number">352</span>,<span class="number">197</span>,<span class="number">354</span>,<span class="number">185</span>,<span class="number">353</span>,<span class="number">171</span>,<span class="number">351</span>,<span class="number">154</span>,<span class="number">348</span>,<span class="number">147</span>,<span class="number">342</span>,<span class="number">137</span>,<span class="number">339</span>,<span class="number">132</span>,<span class="number">330</span>,<span class="number">122</span>,<span class="number">327</span>,</div><div class="line"><span class="number">120</span>,<span class="number">314</span>,<span class="number">116</span>,<span class="number">304</span>,<span class="number">117</span>,<span class="number">293</span>,<span class="number">118</span>,<span class="number">284</span>,<span class="number">118</span>,<span class="number">281</span>,<span class="number">122</span>,<span class="number">275</span>,<span class="number">128</span>,<span class="number">265</span>,<span class="number">129</span>,<span class="number">257</span>,<span class="number">131</span>,<span class="number">244</span>,<span class="number">133</span>,<span class="number">239</span>,<span class="number">134</span>,<span class="number">228</span>,<span class="number">136</span>,<span class="number">221</span>,<span class="number">137</span>,</div><div class="line"><span class="number">214</span>,<span class="number">138</span>,<span class="number">209</span>,<span class="number">135</span>,<span class="number">201</span>,<span class="number">132</span>,<span class="number">192</span>,<span class="number">130</span>,<span class="number">184</span>,<span class="number">131</span>,<span class="number">175</span>,<span class="number">129</span>,<span class="number">170</span>,<span class="number">131</span>,<span class="number">159</span>,<span class="number">134</span>,<span class="number">157</span>,<span class="number">134</span>,<span class="number">160</span>,<span class="number">130</span>,<span class="number">170</span>,<span class="number">125</span>,<span class="number">176</span>,<span class="number">114</span>,<span class="number">176</span>,</div><div class="line"><span class="number">102</span>,<span class="number">173</span>,<span class="number">103</span>,<span class="number">172</span>,<span class="number">108</span>,<span class="number">171</span>,<span class="number">111</span>,<span class="number">163</span>,<span class="number">115</span>,<span class="number">156</span>,<span class="number">116</span>,<span class="number">149</span>,<span class="number">117</span>,<span class="number">142</span>,<span class="number">116</span>,<span class="number">136</span>,<span class="number">115</span>,<span class="number">129</span>,<span class="number">115</span>,<span class="number">124</span>,<span class="number">115</span>,<span class="number">120</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">117</span>,</div><div class="line"><span class="number">113</span>,<span class="number">120</span>,<span class="number">109</span>,<span class="number">122</span>,<span class="number">102</span>,<span class="number">122</span>,<span class="number">100</span>,<span class="number">121</span>,<span class="number">95</span>,<span class="number">121</span>,<span class="number">89</span>,<span class="number">115</span>,<span class="number">87</span>,<span class="number">110</span>,<span class="number">82</span>,<span class="number">109</span>,<span class="number">84</span>,<span class="number">118</span>,<span class="number">89</span>,<span class="number">123</span>,<span class="number">93</span>,<span class="number">129</span>,<span class="number">100</span>,<span class="number">130</span>,<span class="number">108</span>,<span class="number">132</span>,<span class="number">110</span>,</div><div class="line"><span class="number">133</span>,<span class="number">110</span>,<span class="number">136</span>,<span class="number">107</span>,<span class="number">138</span>,<span class="number">105</span>,<span class="number">140</span>,<span class="number">95</span>,<span class="number">138</span>,<span class="number">86</span>,<span class="number">141</span>,<span class="number">79</span>,<span class="number">149</span>,<span class="number">77</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">162</span>,<span class="number">90</span>,<span class="number">165</span>,<span class="number">97</span>,<span class="number">167</span>,<span class="number">99</span>,<span class="number">171</span>,<span class="number">109</span>,<span class="number">171</span>,<span class="number">107</span>,<span class="number">161</span>,</div><div class="line"><span class="number">111</span>,<span class="number">156</span>,<span class="number">113</span>,<span class="number">170</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">118</span>,<span class="number">208</span>,<span class="number">117</span>,<span class="number">223</span>,<span class="number">121</span>,<span class="number">239</span>,<span class="number">128</span>,<span class="number">251</span>,<span class="number">133</span>,<span class="number">259</span>,<span class="number">136</span>,<span class="number">266</span>,<span class="number">139</span>,<span class="number">276</span>,<span class="number">143</span>,<span class="number">290</span>,<span class="number">148</span>,<span class="number">310</span>,<span class="number">151</span>,</div><div class="line"><span class="number">332</span>,<span class="number">155</span>,<span class="number">348</span>,<span class="number">156</span>,<span class="number">353</span>,<span class="number">153</span>,<span class="number">366</span>,<span class="number">149</span>,<span class="number">379</span>,<span class="number">147</span>,<span class="number">394</span>,<span class="number">146</span>,<span class="number">399</span>]</div><div class="line">second = [<span class="number">156</span>,<span class="number">141</span>,<span class="number">165</span>,<span class="number">135</span>,<span class="number">169</span>,<span class="number">131</span>,<span class="number">176</span>,<span class="number">130</span>,<span class="number">187</span>,<span class="number">134</span>,<span class="number">191</span>,<span class="number">140</span>,<span class="number">191</span>,<span class="number">146</span>,<span class="number">186</span>,<span class="number">150</span>,<span class="number">179</span>,<span class="number">155</span>,<span class="number">175</span>,<span class="number">157</span>,<span class="number">168</span>,<span class="number">157</span>,<span class="number">163</span>,<span class="number">157</span>,<span class="number">159</span>,</div><div class="line"><span class="number">157</span>,<span class="number">158</span>,<span class="number">164</span>,<span class="number">159</span>,<span class="number">175</span>,<span class="number">159</span>,<span class="number">181</span>,<span class="number">157</span>,<span class="number">191</span>,<span class="number">154</span>,<span class="number">197</span>,<span class="number">153</span>,<span class="number">205</span>,<span class="number">153</span>,<span class="number">210</span>,<span class="number">152</span>,<span class="number">212</span>,<span class="number">147</span>,<span class="number">215</span>,<span class="number">146</span>,<span class="number">218</span>,<span class="number">143</span>,<span class="number">220</span>,<span class="number">132</span>,<span class="number">220</span>,</div><div class="line"><span class="number">125</span>,<span class="number">217</span>,<span class="number">119</span>,<span class="number">209</span>,<span class="number">116</span>,<span class="number">196</span>,<span class="number">115</span>,<span class="number">185</span>,<span class="number">114</span>,<span class="number">172</span>,<span class="number">114</span>,<span class="number">167</span>,<span class="number">112</span>,<span class="number">161</span>,<span class="number">109</span>,<span class="number">165</span>,<span class="number">107</span>,<span class="number">170</span>,<span class="number">99</span>,<span class="number">171</span>,<span class="number">97</span>,<span class="number">167</span>,<span class="number">89</span>,<span class="number">164</span>,<span class="number">81</span>,<span class="number">162</span>,</div><div class="line"><span class="number">77</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">148</span>,<span class="number">87</span>,<span class="number">140</span>,<span class="number">96</span>,<span class="number">138</span>,<span class="number">105</span>,<span class="number">141</span>,<span class="number">110</span>,<span class="number">136</span>,<span class="number">111</span>,<span class="number">126</span>,<span class="number">113</span>,<span class="number">129</span>,<span class="number">118</span>,<span class="number">117</span>,<span class="number">128</span>,<span class="number">114</span>,<span class="number">137</span>,<span class="number">115</span>,<span class="number">146</span>,<span class="number">114</span>,<span class="number">155</span>,<span class="number">115</span>,</div><div class="line"><span class="number">158</span>,<span class="number">121</span>,<span class="number">157</span>,<span class="number">128</span>,<span class="number">156</span>,<span class="number">134</span>,<span class="number">157</span>,<span class="number">136</span>,<span class="number">156</span>,<span class="number">136</span>]</div><div class="line"></div><div class="line">draw.line(first, fill=<span class="string">'#0000FF'</span>)</div><div class="line">draw.line(second, fill=<span class="string">'#FF0000'</span>)</div><div class="line">img.show()</div></pre></td></tr></table></figure>
<p>连线的结果是一头牛，我想到的关键词是cow，输入后404，看答案说是bull(公牛)。。。</p>
<p>anyway，下一关的入口是：<a href="http://www.pythonchallenge.com/pc/return/bull.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/return/bull.html</a></p>
<h3 id="第10关"><a href="#第10关" class="headerlink" title="第10关"></a>第10关</h3><p>线索：<code>图片中牛是一条链接，点击后显示a = [1, 11, 21, 1211, 111221, 另外网页中图片下方提问len(a[30])=?</code></p>
<p>可以想到是根据线索推算出a[30]，并计算a[30]的长度；可能是以前接触过，所以我一下就看出a的规律了，1-&gt;11是一个1的意思，…，1211-&gt;111221是一个1，一个2，两个1的意思。</p>
<p>因此写出以下代码推算a[30]：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(num)</span>:</span></div><div class="line">    res = []</div><div class="line">    pre = str(num)[<span class="number">0</span>]</div><div class="line">    cnt = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> str(num)[<span class="number">1</span>:]:</div><div class="line">        <span class="keyword">if</span> val == pre:</div><div class="line">            cnt += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            res.append(str(cnt))</div><div class="line">            res.append(str(pre))</div><div class="line">            cnt = <span class="number">1</span></div><div class="line">        pre = val</div><div class="line">    res.append(str(cnt))</div><div class="line">    res.append(str(pre))</div><div class="line">    <span class="comment">#print(''.join(res))</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(res)</div><div class="line"></div><div class="line">a = []</div><div class="line">a.append(<span class="number">1</span>)</div><div class="line"><span class="keyword">while</span> len(a) &lt; <span class="number">32</span>:</div><div class="line">    a.append(compute(a[<span class="number">-1</span>]))</div><div class="line">print(len(a[<span class="number">30</span>]))</div></pre></td></tr></table></figure>
<p>得到结果5808，从而得到下一关入口：<a href="http://www.pythonchallenge.com/pc/return/5808.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/return/5808.html</a></p>
<h3 id="第11关"><a href="#第11关" class="headerlink" title="第11关"></a>第11关</h3><p>线索：<code>一张模糊的图片，标题提示odd or even</code></p>
<p>完全没有思路，看了别人答案说是根据奇偶坐标生成一个新图…orz</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">img = Image.open(<span class="string">'cave.jpg'</span>)</div><div class="line">img_value = img.load()</div><div class="line">width, height = img.size</div><div class="line">new_img = Image.new(<span class="string">'RGB'</span>, (int(width/<span class="number">2</span>), int(height/<span class="number">2</span>)))</div><div class="line"></div><div class="line">new_img_value = new_img.load()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(int(width/<span class="number">2</span>)):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(int(height/<span class="number">2</span>)):</div><div class="line">    	<span class="comment">#下面两条语句执行效果是一样的</span></div><div class="line">        new_img_value[i, j] = img_value[<span class="number">2</span>*i, <span class="number">2</span>*j]</div><div class="line">        <span class="comment">#new_img_value[i, j] = img_value[2*i+1, 2*j+1]</span></div><div class="line"></div><div class="line">new_img.show()</div></pre></td></tr></table></figure>
<p>隐约可以看到图片上显示evil,所以得到下一关入口：<a href="http://www.pythonchallenge.com/pc/return/evil.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/return/evil.html</a></p>
<h3 id="第12关"><a href="#第12关" class="headerlink" title="第12关"></a>第12关</h3><p>线索：<code>只有一张图片</code></p>
<p>没有任何线索，玩到这里感觉逻辑性已经很弱了，答案解释的理由也很牵强，直接给出参考的答案链接把<a href="http://www.cnblogs.com/dukeleo/p/3467947.html" target="_blank" rel="external">Python Challenge 第十二关 From 博客园</a></p>
<p>照例贴一下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">img = open(<span class="string">'evil2.gfx'</span>, <span class="string">'rb'</span>)</div><div class="line">content = img.read()</div><div class="line">img.close()</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    img = open(<span class="string">'%d.jpg'</span> % i, <span class="string">'wb'</span>)</div><div class="line">    img.write(content[i::<span class="number">5</span>])</div><div class="line">    img.close()</div></pre></td></tr></table></figure>
<p>根据5张图片上的字符组合成一个单词disproportional，得到下一关入口：<a href="http://www.pythonchallenge.com/pc/return/disproportional.html" target="_blank" rel="external">http://www.pythonchallenge.com/pc/return/disproportional.html</a></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>我就玩到这里了，因为到这里已经没有什么趣味性可言了，更多的是一种任务性在驱动，感觉无趣，就没有再玩下去了，如果有兴趣的朋友可以尝试继续挑战！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然间发现了一个很有趣的python练习网站&lt;a href=&quot;http://www.pythonchallenge.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python Challenge&lt;/a&gt;，具体每一关的玩法是根据提供的线索编程得到进
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="python" scheme="http://blog.yinwoods.work/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫小技巧总结</title>
    <link href="http://blog.yinwoods.work/2016/04/05/python%E7%88%AC%E8%99%AB%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.yinwoods.work/2016/04/05/python爬虫小技巧总结/</id>
    <published>2016-04-04T16:00:00.000Z</published>
    <updated>2017-07-26T10:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在<a href="http://www.codeceo.com/article/python-spider-skills.html" target="_blank" rel="external">码农网</a>看过python的爬虫小技巧，但是我认为总结地不够全面，而且在这段编写爬虫的过程中，也形成了自己的套路～</p>
<p>特意在这里分享给大家，当然一方面也是以后忘记了留作参考。</p>
<h3 id="1、基本网页抓取"><a href="#1、基本网页抓取" class="headerlink" title="1、基本网页抓取"></a>1、基本网页抓取</h3><blockquote>
<ul>
<li><p>包含伪装浏览器访问（解决403错误）</p>
</li>
<li><p>使用代理，避免长时间爬取被封本机IP</p>
</li>
<li><p>处理网页gzip压缩</p>
</li>
<li><p>HTTPError异常处理</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#获取url 对应 HTML 源码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></div><div class="line">	<span class="comment">#伪装浏览器</span></div><div class="line">    header = dict(&#123; <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/48.0.2564.116 Chrome/48.0.2564.116 Safari/537.36'</span>,</div><div class="line">                    <span class="string">'Accept-encoding'</span>: <span class="string">'gzip'</span>,</div><div class="line">                    &#125;)</div><div class="line">    request = urllib.request.Request(url, headers=header)</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">try</span>: </div><div class="line">    	<span class="comment">#使用代理：117.135.252.227:80</span></div><div class="line">        proxy_support = urllib.request.ProxyHandler(&#123;<span class="string">'http'</span>: <span class="string">'117.135.252.227:80'</span>&#125;)</div><div class="line">        opener = urllib.request.build_opener(proxy_support)</div><div class="line">        urllib.request.install_opener(opener)</div><div class="line"></div><div class="line">        page = urllib.request.urlopen(request)</div><div class="line"></div><div class="line">        <span class="comment">#print(page.headers.get('Content-Encoding')) 'gzip'</span></div><div class="line">        <span class="comment">#print(page.headers.get_content_charset()) 'utf8'</span></div><div class="line"></div><div class="line">        <span class="comment">#如果使用了gzip压缩</span></div><div class="line">        <span class="keyword">if</span> page.headers.get(<span class="string">'Content-Encoding'</span>) == <span class="string">'gzip'</span>:</div><div class="line">            <span class="keyword">return</span> zlib.decompress(page.read(), <span class="number">16</span>+zlib.MAX_WBITS).decode(<span class="string">'utf8'</span>)</div><div class="line">        <span class="keyword">else</span>: </div><div class="line">            <span class="keyword">return</span> page.read().decode(page.headers.get_content_charset())</div><div class="line"></div><div class="line">    <span class="keyword">except</span> urllib.request.HTTPError <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">'HTTPERROR: '</span>, str(e))</div><div class="line">    <span class="keyword">return</span> urllib.request.HTTPError</div></pre></td></tr></table></figure>
<h3 id="2、Mysql数据库操作"><a href="#2、Mysql数据库操作" class="headerlink" title="2、Mysql数据库操作"></a>2、Mysql数据库操作</h3><p>一般在类的构造函数<strong>init</strong>中完成数据库的连接，在析构函数中断开连接。</p>
<p>示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> mysql.connector</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">()</span>:</span></div><div class="line">	<span class="comment">#构造函数</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">		self.conn = mysql.connector.connect(user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, host=<span class="string">'localhost'</span>, database=<span class="string">'test'</span>)</div><div class="line">		self.cursor = self.conn.cursor(buffered=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">	<span class="comment">#析构函数</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">		self.cursor.close()</div><div class="line">		self.conn.close()</div><div class="line"></div><div class="line">	<span class="comment">#数据库操作</span></div><div class="line">	<span class="comment">#查询table表中id=1的数据个数</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">doSomething</span><span class="params">(self)</span>:</span></div><div class="line">		query = <span class="string">'SELECT COUNT(*) FROM table WHERE id = %s'</span></div><div class="line">		data = (<span class="number">1</span>, )</div><div class="line"></div><div class="line">		<span class="comment">#执行查询</span></div><div class="line">		self.cursor.excute(query, data)</div><div class="line">		<span class="comment">#确保查询提交</span></div><div class="line">		self.conn.commit()</div></pre></td></tr></table></figure>
<h3 id="3、把json格式数据插入表中"><a href="#3、把json格式数据插入表中" class="headerlink" title="3、把json格式数据插入表中"></a>3、把json格式数据插入表中</h3><p>首先使用toJson()函数把我们要插入的数据项转为json格式，再使用jsonINTOMysql()函数将json格式数据插入mysql中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">toJson</span><span class="params">(**kwargs)</span>:</span></div><div class="line">	<span class="keyword">return</span> kwargs</div><div class="line"></div><div class="line"><span class="comment">#把json格式的rowdict插入table中</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsonINToMysql</span><span class="params">(table, rowdict)</span>:</span></div><div class="line">    self.cursor.execute(<span class="string">'DESCRIBE %s'</span> % table)</div><div class="line">    allowedKeys = set(row[<span class="number">0</span>] <span class="keyword">for</span> row <span class="keyword">in</span> self.cursor.fetchall())</div><div class="line"></div><div class="line">    keys = allowedKeys.intersection(rowdict)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(rowdict) &gt; len(keys):</div><div class="line">        unknownKeys = set(rowdict)-allowedKeys</div><div class="line">        print(sys.stderr, <span class="string">"skipping keys"</span>, <span class="string">","</span>.join(unknownKeys))</div><div class="line"></div><div class="line">    columns = <span class="string">","</span>.join(keys)</div><div class="line">    values_template = <span class="string">", "</span>.join([<span class="string">"%s"</span>]*len(keys))</div><div class="line"></div><div class="line">    sql = <span class="string">"INSERT INTO %s(%s) VALUES (%s)"</span> % (table, columns, values_template)</div><div class="line"></div><div class="line">    values = tuple(rowdict[key] <span class="keyword">for</span> key <span class="keyword">in</span> keys)</div><div class="line">    self.cursor.execute(sql, values)</div><div class="line">    self.conn.commit()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></div><div class="line">	<span class="comment">#假设数据表table中有id、name、sex三项</span></div><div class="line">	json = toJson(id=id, name=name, sex=sex)</div><div class="line">	jsonINTOMysql(<span class="string">'table'</span>, json)</div></pre></td></tr></table></figure>
<h3 id="4、对爬取数据的乱码进行解析"><a href="#4、对爬取数据的乱码进行解析" class="headerlink" title="4、对爬取数据的乱码进行解析"></a>4、对爬取数据的乱码进行解析</h3><p>有时我们需要爬取的是单独的json格式数据(请参考<a href="http://blog.yinwoods.com/coding/%E5%88%A9%E7%94%A8%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96js%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE.html" target="_blank" rel="external">利用爬虫爬取js生成数据</a>)，可能会发现json中的数据是经过编码的，例如我爬取汽车之家车辆的详细参数配置时，会发现json中的数据为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;SIP_C_119&quot;:&quot;2645&quot;,&quot;SIP_C_250&quot;:&quot;%2d&quot;,&quot;SIP_C_306&quot;:&quot;%2d&quot;,&quot;SIP_T_LOGO&quot;:&quot;http://i1.itc.cn/20130624/83e_01580269_5a5f_1526_74cc_c6bf0064c28e_1.jpg&quot;,&quot;SIP_C_114&quot;:&quot;%2d%2d%2d&quot;,&quot;SIP_C_117&quot;:&quot;7005&quot;,&quot;SIP_C_305&quot;:&quot;%2d&quot;,&quot;SIP_C_304&quot;:&quot;%2d%2d%2d&quot;,&quot;SIP_C_118&quot;:&quot;2040&quot;,&quot;SIP_C_303&quot;:&quot;%u67f4%u6cb9%u673a&quot;,&quot;SIP_C_115&quot;:&quot;%u6574%u8f663%u5e74%2f6%u4e07%u516c%u91cc&quot;,&quot;SIP_C_116&quot;:&quot;%2d%2d%2d&quot;,&quot;model_engine_type&quot;:2,&quot;SIP_C_120&quot;:&quot;3935&quot;,&quot;overseas&quot;:false,&quot;SIP_T_PRICE&quot;:32.0,&quot;SIP_C_261&quot;:&quot;%u25cf&quot;,&quot;SIP_T_ID&quot;:127870,&quot;SIP_T_GEAR&quot;:&quot;M&quot;,&quot;SIP_C_124&quot;:&quot;%u5ba2%u8f66&quot;,&quot;SIP_C_125&quot;:&quot;2&quot;,&quot;SIP_C_126&quot;:&quot;10%2d23&quot;,&quot;SIP_C_127&quot;:&quot;90&quot;,&quot;SIP_C_170&quot;:&quot;%2d&quot;,&quot;SIP_C_329&quot;:&quot;120&quot;,&quot;SIP_C_171&quot;:&quot;%u673a%u68b0%u6db2%u538b%u52a9%u529b%u8f6c%u5411&quot;,&quot;SIP_C_322&quot;:&quot;%2d&quot;,&quot;SIP_T_MODELNAME&quot;:&quot;%u5b89%u51ef%u5ba2%u8f66%20%u5b9d%u65af%u901a&quot;,&quot;SIP_C_321&quot;:&quot;%2d&quot;,&quot;SIP_C_320&quot;:&quot;%u624b%u52a8&quot;,&quot;SIP_C_185&quot;:&quot;%u25cf&quot;,&quot;SIP_C_283&quot;:&quot;%u25cf&quot;,&quot;SIP_C_318&quot;:&quot;%u5364%u7d20&quot;,&quot;SIP_C_108&quot;:&quot;5%u6863%u624b%u52a8&quot;,&quot;SIP_C_317&quot;:&quot;%2d&quot;,&quot;SIP_C_285&quot;:&quot;%u25cf&quot;,&quot;SIP_C_314&quot;:&quot;%2d&quot;,&quot;SIP_C_104&quot;:&quot;%u6c5f%u6dee%u6c7d%u8f66&quot;,&quot;SIP_C_313&quot;:&quot;%2d&quot;,&quot;SIP_C_105&quot;:&quot;%u5176%u4ed6%u8f66%u578b&quot;,&quot;SIP_C_316&quot;:&quot;%2d&quot;,&quot;SIP_C_106&quot;:&quot;2%u95e810%2d23%u5ea7%u5ba2%u8f66&quot;,&quot;SIP_C_315&quot;:&quot;%2d&quot;,&quot;SIP_C_107&quot;:&quot;3%2e0T%20163%u9a6c%u529bL4&quot;,&quot;SIP_C_310&quot;:&quot;%2d&quot;,&quot;SIP_C_312&quot;:&quot;%2d&quot;,&quot;SIP_C_102&quot;:&quot;32%2e0%u4e07%u5143&quot;,&quot;SIP_C_103&quot;:&quot;32%2e0%7e32%2e0%u4e07%u5143&quot;,&quot;SIP_C_150&quot;:&quot;%u7f38%u5185%u76f4%u55b7&quot;,&quot;SIP_C_294&quot;:&quot;%2d%2d%2f%2d%2d%2f%2d%2d&quot;,&quot;SIP_C_297&quot;:&quot;163&quot;,&quot;SIP_C_291&quot;:&quot;%2d%2d%2d&quot;,&quot;SIP_C_151&quot;:&quot;%u94dd%u5408%u91d1&quot;,&quot;SIP_C_293&quot;:&quot;7005x2040x2645&quot;,&quot;SIP_C_152&quot;:&quot;%u94f8%u94c1&quot;,&quot;SIP_C_292&quot;:&quot;%2d%2d%2d&quot;,&quot;SIP_T_DISPL&quot;:3.0,&quot;SIP_C_158&quot;:&quot;%u624b%u52a8&quot;,&quot;SIP_C_157&quot;:&quot;5&quot;,&quot;SIP_C_156&quot;:&quot;5%u6863%u624b%u52a8&quot;,&quot;SIP_C_155&quot;:&quot;%u56fdIV&quot;,&quot;SIP_C_298&quot;:&quot;120%2f3800&quot;,&quot;SIP_C_299&quot;:&quot;362%2f1600%2d2200&quot;,&quot;SIP_C_159&quot;:&quot;%u4e2d%u7f6e%u540e%u9a71&quot;,&quot;SIP_C_224&quot;:&quot;%u771f%u76ae&quot;,&quot;SIP_C_160&quot;:&quot;%u9ea6%u5f17%u900a%u5f0f%u72ec%u7acb%u60ac%u6302&quot;,&quot;SIP_C_161&quot;:&quot;%u94a2%u677f%u5f39%u7c27%u7ed3%u6784&quot;,&quot;SIP_C_162&quot;:&quot;%u627f%u8f7d%u5f0f%u8f66%u8eab&quot;,&quot;SIP_C_163&quot;:&quot;7%2e00%20R16&quot;,&quot;SIP_C_164&quot;:&quot;7%2e00%20R16&quot;,&quot;SIP_C_165&quot;:&quot;%u94a2%u5236&quot;,&quot;nameDomain&quot;:&quot;4094&quot;,&quot;SIP_C_167&quot;:&quot;%u901a%u98ce%u76d8%u5f0f&quot;,&quot;SIP_C_166&quot;:&quot;%u5168%u5c3a%u5bf8%u5907%u80ce&quot;,&quot;SIP_C_169&quot;:&quot;%u624b%u5239%u5f0f%u5236%u52a8&quot;,&quot;SIP_C_168&quot;:&quot;%u9f13%u5f0f&quot;,&quot;SIP_T_MODELID&quot;:4094,&quot;SIP_T_STA&quot;:1,&quot;SIP_C_335&quot;:&quot;6%u4e07&quot;,&quot;SIP_C_333&quot;:&quot;1600&quot;,&quot;SIP_C_334&quot;:&quot;2200&quot;,&quot;SIP_C_332&quot;:&quot;362&quot;,&quot;SIP_T_YEAR&quot;:2014,&quot;SIP_C_330&quot;:&quot;3800&quot;,&quot;SIP_C_139&quot;:&quot;4&quot;,&quot;SIP_C_138&quot;:&quot;%u6da1%u8f6e%u589e%u538b&quot;,&quot;SIP_C_137&quot;:&quot;2968&quot;,&quot;SIP_C_136&quot;:&quot;3%2e0&quot;,&quot;SIP_C_135&quot;:&quot;NGD3%2e0%2dC3HA&quot;,&quot;SIP_C_134&quot;:&quot;3%2e0T%20163%u9a6c%u529bL4&quot;,&quot;SIP_C_249&quot;:&quot;0&quot;,&quot;SIP_C_140&quot;:&quot;%u76f4%u5217&quot;,&quot;SIP_C_141&quot;:&quot;4&quot;,&quot;SIP_C_347&quot;:&quot;%u5364%u7d20&quot;,&quot;SIP_C_142&quot;:&quot;%u53cc%u9876%u7f6e&quot;,&quot;brandNameDomain&quot;:&quot;ak-2171&quot;,&quot;SIP_C_149&quot;:&quot;%u67f4%u6cb9&quot;,&quot;SIP_C_148&quot;:&quot;40%2e0&quot;,&quot;SIP_T_NAME&quot;:&quot;3%2e0T%20VIP%u7248&quot;,&quot;SIP_C_241&quot;:&quot;%u25cf&quot;&#125;</div></pre></td></tr></table></figure>
<p>这种编码相信大家看着很熟悉，就像我们把包含中文的url地址复制粘贴下来的结果，那么我们该怎么对这种数据进行解码呢？</p>
<p>使用这种方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#对str先进行unquote url解码，再进行eval unicode解码</span></div><div class="line"><span class="comment">#处理数据时只需要我们把key-value对中的value依次作为参数传给deUnicode即可</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deUnicode</span><span class="params">(str)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ans = eval(<span class="string">'"%s"'</span> % unquote(str).replace(<span class="string">'%'</span>, <span class="string">'\\'</span>))</div><div class="line">        <span class="keyword">return</span> ans</div><div class="line">    <span class="keyword">except</span> SyntaxError <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">return</span> str</div></pre></td></tr></table></figure>
<h3 id="5、requests通过post提交表单数据（一般用于模拟登录）"><a href="#5、requests通过post提交表单数据（一般用于模拟登录）" class="headerlink" title="5、requests通过post提交表单数据（一般用于模拟登录）"></a>5、requests通过post提交表单数据（一般用于模拟登录）</h3><p>requests的post实现依赖于维持一个session，也就是说在session存在期间，我们可以以登录的身份来获取其他需要登录后才能获取的页面源码。</p>
<p>简单使用如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">url = <span class="string">''</span></div><div class="line">datas = urllib.parse.urlencode(&#123;</div><div class="line">   <span class="string">'data-key'</span> : <span class="string">'data-value'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">headers = dict(&#123;</div><div class="line">    <span class="string">'header-key'</span> : <span class="string">'header-value'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">session = requests.session()</div><div class="line">session.post(url, datas, headers=headers)</div><div class="line"></div><div class="line">res = session.get(other url).text</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在&lt;a href=&quot;http://www.codeceo.com/article/python-spider-skills.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;码农网&lt;/a&gt;看过python的爬虫小技巧，但是我认为总结地不够全面，而
    
    </summary>
    
      <category term="coding" scheme="http://blog.yinwoods.work/categories/coding/"/>
    
    
      <category term="python, 爬虫" scheme="http://blog.yinwoods.work/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
